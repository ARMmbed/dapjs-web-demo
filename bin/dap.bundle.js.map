{"version":3,"sources":["webpack:///webpack/bootstrap 2a23e40f7b99d1a11e38","webpack:///../dapjs/built/util.js","webpack:///../dapjs/built/main.js","webpack:///./src/main.ts","webpack:///../dapjs/built/cortex_m.js","webpack:///../dapjs/built/debug.js","webpack:///../dapjs/built/device.js","webpack:///../dapjs/built/dap.js","webpack:///./node_modules/webhid/bin/hid.js","webpack:///./src/targets.ts","webpack:///./src/k64f_flash.ts"],"names":[],"mappings":"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,CAAC,CAAC,CAAC;;;;SACjC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;;;;;;;;AC7GH;AACA;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA;AACA,aAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,gBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,sBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kCAAkC,SAAS;AAC3C,kCAAkC,WAAW,UAAU;AACvD,yCAAyC,cAAc;AACvD;AACA,6GAA6G,OAAO,UAAU;AAC9H,gFAAgF,iBAAiB,OAAO;AACxG,wDAAwD,gBAAgB,QAAQ,OAAO;AACvF,8CAA8C,gBAAgB,gBAAgB,OAAO;AACrF;AACA,iCAAiC;AACjC;AACA;AACA,SAAS,YAAY,aAAa,OAAO,EAAE,UAAU,WAAW;AAChE,mCAAmC,SAAS;AAC5C;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gBAAgB;AACjD;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,sDAAsD;AACnG;AACA,6BAA6B,EAAE,EAAE,EAAE,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B,EAAE,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,WAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA,oC;;;;;;;ACpxBA;AACA;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA;AACA,aAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,gBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,sBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kCAAkC,SAAS;AAC3C,kCAAkC,WAAW,UAAU;AACvD,yCAAyC,cAAc;AACvD;AACA,6GAA6G,OAAO,UAAU;AAC9H,gFAAgF,iBAAiB,OAAO;AACxG,wDAAwD,gBAAgB,QAAQ,OAAO;AACvF,8CAA8C,gBAAgB,gBAAgB,OAAO;AACrF;AACA,iCAAiC;AACjC;AACA;AACA,SAAS,YAAY,aAAa,OAAO,EAAE,UAAU,WAAW;AAChE,mCAAmC,SAAS;AAC5C;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA,iC;;;;;;;ACnEA;AACA;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA;AACA,aAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,gBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,sBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kCAAkC,SAAS;AAC3C,kCAAkC,WAAW,UAAU;AACvD,yCAAyC,cAAc;AACvD;AACA,6GAA6G,OAAO,UAAU;AAC9H,gFAAgF,iBAAiB,OAAO;AACxG,wDAAwD,gBAAgB,QAAQ,OAAO;AACvF,8CAA8C,gBAAgB,gBAAgB,OAAO;AACrF;AACA,iCAAiC;AACjC;AACA;AACA,SAAS,YAAY,aAAa,OAAO,EAAE,UAAU,WAAW;AAChE,mCAAmC,SAAS;AAC5C;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,SAAS;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,oBAAoB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,+CAA+C,gBAAgB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA,kC;;;;;;;AC1RA;AACA;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA;AACA,aAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,gBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,sBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kCAAkC,SAAS;AAC3C,kCAAkC,WAAW,UAAU;AACvD,yCAAyC,cAAc;AACvD;AACA,6GAA6G,OAAO,UAAU;AAC9H,gFAAgF,iBAAiB,OAAO;AACxG,wDAAwD,gBAAgB,QAAQ,OAAO;AACvF,8CAA8C,gBAAgB,gBAAgB,OAAO;AACrF;AACA,iCAAiC;AACjC;AACA;AACA,SAAS,YAAY,aAAa,OAAO,EAAE,UAAU,WAAW;AAChE,mCAAmC,SAAS;AAC5C;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA,+B;;;;;;;AC7NA;AACA;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA;AACA,aAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,gBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,sBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kCAAkC,SAAS;AAC3C,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AAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;KACjG;IAED,8BAA8B;IAC9B,MAAM,EAAE,GAAG;IACX,QAAQ,EAAE,IAAI;IACd,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,IAAI;IACnB,UAAU,EAAE,IAAI;IAEhB,sCAAsC;IACtC,OAAO,EAAE,GAAG;IACZ,MAAM,EAAE,KAAK;IACb,OAAO,EAAE,KAAK;IACd,MAAM,EAAE,GAAG;IACX,OAAO,EAAE,KAAK;IACd,MAAM,EAAE,IAAI;IAEZ,oBAAoB;IACpB,UAAU,EAAE,GAAG;IACf,SAAS,EAAE,GAAG;IACd,QAAQ,EAAE,KAAK;IACf,WAAW,EAAE;QACT,CAAC,GAAG,EAAE,KAAK,CAAC;KACf;IAED,kBAAkB,EAAE,UAAU;IAC9B,UAAU,EAAE,UAAU;IACtB,YAAY,EAAE,UAAU;IACxB,WAAW,EAAE,UAAU;CAC1B,CAAC","file":"dap.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2a23e40f7b99d1a11e38","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar _this = this;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.readUInt32LE = function (b, idx) {\r\n    return (b[idx] |\r\n        (b[idx + 1] << 8) |\r\n        (b[idx + 2] << 16) |\r\n        (b[idx + 3] << 24)) >>> 0;\r\n};\r\nexports.bufferConcat = function (bufs) {\r\n    var len = 0;\r\n    for (var _i = 0, bufs_1 = bufs; _i < bufs_1.length; _i++) {\r\n        var b = bufs_1[_i];\r\n        len += b.length;\r\n    }\r\n    var r = new Uint8Array(len);\r\n    len = 0;\r\n    for (var _a = 0, bufs_2 = bufs; _a < bufs_2.length; _a++) {\r\n        var b = bufs_2[_a];\r\n        r.set(b, len);\r\n        len += b.length;\r\n    }\r\n    return r;\r\n};\r\nexports.delay = function (t) { return __awaiter(_this, void 0, void 0, function () {\r\n    return __generator(this, function (_a) {\r\n        return [2 /*return*/, new Promise(function (resolve) {\r\n                setTimeout(resolve, t);\r\n            })];\r\n    });\r\n}); };\r\nexports.addInt32 = function (arr, val) {\r\n    if (!arr) {\r\n        arr = [];\r\n    }\r\n    arr.push(val & 0xff, (val >> 8) & 0xff, (val >> 16) & 0xff, (val >> 24) & 0xff);\r\n    return arr;\r\n};\r\nexports.hex = function (v) {\r\n    return \"0x\" + v.toString(16);\r\n};\r\nexports.rid = function (v) {\r\n    var m = [\r\n        \"DP_0x0\",\r\n        \"DP_0x4\",\r\n        \"DP_0x8\",\r\n        \"DP_0xC\",\r\n        \"AP_0x0\",\r\n        \"AP_0x4\",\r\n        \"AP_0x8\",\r\n        \"AP_0xC\",\r\n    ];\r\n    return m[v] || \"?\";\r\n};\r\nexports.bank = function (addr) {\r\n    var APBANKSEL = 0x000000f0;\r\n    return (addr & APBANKSEL) | (addr & 0xff000000);\r\n};\r\nexports.apReg = function (r, mode) {\r\n    var v = r | mode | 1 /* AP_ACC */;\r\n    return (4 + ((v & 0x0c) >> 2));\r\n};\r\nexports.bufToUint32Array = function (buf) {\r\n    exports.assert((buf.length & 3) === 0);\r\n    var r = [];\r\n    if (!buf.length) {\r\n        return r;\r\n    }\r\n    r[buf.length / 4 - 1] = 0;\r\n    for (var i = 0; i < r.length; ++i) {\r\n        r[i] = exports.readUInt32LE(buf, i << 2);\r\n    }\r\n    return r;\r\n};\r\nexports.assert = function (cond) {\r\n    if (!cond) {\r\n        throw new Error(\"assertion failed\");\r\n    }\r\n};\r\nexports.regRequest = function (regId, isWrite) {\r\n    if (isWrite === void 0) { isWrite = false; }\r\n    var request = !isWrite ? 2 /* READ */ : 0 /* WRITE */;\r\n    if (regId < 4) {\r\n        request |= 0 /* DP_ACC */;\r\n    }\r\n    else {\r\n        request |= 1 /* AP_ACC */;\r\n    }\r\n    request |= (regId & 3) << 2;\r\n    return request;\r\n};\r\nexports.hexBytes = function (bytes) {\r\n    var chk = 0;\r\n    var r = \":\";\r\n    bytes.forEach(function (b) { return chk += b; });\r\n    bytes.push((-chk) & 0xff);\r\n    bytes.forEach(function (b) { return r += (\"0\" + b.toString(16)).slice(-2); });\r\n    return r.toUpperCase();\r\n};\r\nvar arrToString = function (arr) {\r\n    var r = \"\";\r\n    for (var i = 0; i < arr.length; ++i) {\r\n        r += (\"0000\" + i).slice(-4) + \": \" + (\"00000000\" + (arr[i] >>> 0).toString(16)).slice(-8);\r\n        if (i != arr.length - 1) {\r\n            r += \"\\n\";\r\n        }\r\n    }\r\n    return r;\r\n};\r\nexports.machineStateToString = function (s) {\r\n    return \"REGS:\\n\" + arrToString(s.registers);\r\n};\r\n//# sourceMappingURL=util.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../dapjs/built/util.js\n// module id = 0\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cortex_m_1 = require(\"./cortex_m\");\r\nexports.CortexM = cortex_m_1.CortexM;\r\nexports.CoreNames = cortex_m_1.CoreNames;\r\nexports.ISANames = cortex_m_1.ISANames;\r\nvar device_1 = require(\"./device\");\r\nexports.Device = device_1.Device;\r\nvar util_1 = require(\"./util\");\r\nexports.machineStateToString = util_1.machineStateToString;\r\n//# sourceMappingURL=main.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../dapjs/built/main.js\n// module id = 1\n// module chunks = 0","import {CoreNames, CortexReg, Device, IMachineState, ISANames, machineStateToString} from \"dapjs\";\r\nimport HID from \"webhid\";\r\nimport {K64F} from \"./targets\";\r\n\r\n$(() => {\r\n    let hid: HID;\r\n    let dev: Device;\r\n    let cm: K64F;\r\n\r\n    if (!navigator.usb) {\r\n        $(\"#noWebUSB\").show();\r\n        return;\r\n    }\r\n\r\n    const log = (str: string) => {\r\n        $(\"#trace\").append(str + \"\\n\");\r\n    };\r\n\r\n    const logClear = () => {\r\n        $(\"#trace\").html(\"\");\r\n    };\r\n\r\n    $(\"#click\").click(async () => {\r\n        $(\"#platform\").attr(\"disabled\", 1);\r\n        $(\"#click\").attr(\"disabled\", 1);\r\n\r\n        $(\"#click\").html(\"Connecting\");\r\n\r\n        const device = await navigator.usb.requestDevice({ filters: [{vendorId: 0x0d28}]});\r\n\r\n        hid = new HID(device);\r\n        await hid.open();\r\n\r\n        try {\r\n            dev = new Device(hid);\r\n            cm = new K64F(dev);\r\n\r\n            await cm.init();\r\n            await cm.halt();\r\n\r\n            $(\"#click\").html(\"Connected\");\r\n            log(\"Connected.\");\r\n\r\n            const [imp, isa, type] = await cm.readCoreType();\r\n\r\n            log(`Found an ARM ${CoreNames.get(type)} (${ISANames.get(isa)})`);\r\n\r\n            await cm.resume();\r\n        } catch (e) {\r\n            console.error(e);\r\n            await dev.close();\r\n        }\r\n\r\n        $(\".when-connected\").attr(\"disabled\", null);\r\n    });\r\n\r\n    $(\"#flash\").click(async () => {\r\n        // flash the microcontroller we have connected.\r\n        logClear();\r\n\r\n        log(\"Preparing to Flash MCU.\");\r\n\r\n        // mov r0, 0x1234\r\n        const program = [0x2034F241, 0xbe00];\r\n        const r0 = await cm.runCode(program, 0x20000020, 0x20000021, 0x0, 0x0);\r\n\r\n        log(`Got r0=0x${r0.toString(16)}`);\r\n        log(\"Done.\");\r\n    });\r\n\r\n    $(\"#flash-erase\").click(async () => {\r\n        // Erase flash\r\n        logClear();\r\n\r\n        log(\"Running flashInit\");\r\n\r\n        const r0 = await cm.flashInit();\r\n        log(`flashInit returned 0x${r0.toString(16)}`);\r\n    });\r\n\r\n    $(\"#halt\").click(async () => {\r\n        await cm.halt();\r\n        log(\"Halted.\");\r\n    });\r\n\r\n    $(\"#resume\").click(async () => {\r\n        await cm.resume();\r\n        log(\"Resumed.\");\r\n    });\r\n\r\n    $(\"#registers\").click(async () => {\r\n        const halt = false;\r\n\r\n        await cm.halt();\r\n        const st = await cm.snapshotMachineState();\r\n        // await cm.resume();\r\n\r\n        logClear();\r\n        log(machineStateToString(st));\r\n    });\r\n\r\n    $(\"#step-instruction\").click(async () => {\r\n        await cm.step();\r\n        const st = await cm.snapshotMachineState();\r\n        // await cm.resume();\r\n\r\n        logClear();\r\n        log(machineStateToString(st));\r\n    });\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar debug_1 = require(\"./debug\");\r\nvar util_1 = require(\"./util\");\r\nexports.CPUID_IMPLEMENTER_MASK = 0xff000000;\r\nexports.CPUID_IMPLEMENTER_POS = 24;\r\nexports.CPUID_VARIANT_MASK = 0x00f00000;\r\nexports.CPUID_VARIANT_POS = 20;\r\nexports.CPUID_ARCHITECTURE_MASK = 0x000f0000;\r\nexports.CPUID_ARCHITECTURE_POS = 16;\r\nexports.CPUID_PARTNO_MASK = 0x0000fff0;\r\nexports.CPUID_PARTNO_POS = 4;\r\nexports.CPUID_REVISION_MASK = 0x0000000f;\r\nexports.CPUID_REVISION_POS = 0;\r\nexports.ISANames = new Map();\r\nexports.ISANames.set(12 /* ARMv6M */, \"ARMv6M\");\r\nexports.ISANames.set(15 /* ARMv7M */, \"ARMv7M\");\r\nexports.CoreNames = new Map();\r\nexports.CoreNames.set(3104 /* CortexM0 */, \"Cortex-M0\");\r\nexports.CoreNames.set(3105 /* CortexM1 */, \"Cortex-M1\");\r\nexports.CoreNames.set(3107 /* CortexM3 */, \"Cortex-M3\");\r\nexports.CoreNames.set(3108 /* CortexM4 */, \"Cortex-M4\");\r\nexports.CoreNames.set(3168 /* CortexM0p */, \"Cortex-M0+\");\r\n/**\r\n * Abstraction of an ARM Cortex M CPU from a programmer's perspective. Provides functionality\r\n * for setting breakpoints, reading general-purpose registers, reading from memory and stopping\r\n * and starting the CPU.\r\n */\r\nvar CortexM = (function () {\r\n    function CortexM(device) {\r\n        this.dev = device;\r\n    }\r\n    /**\r\n     * Initialise the debug access port on the device, and read the device type.\r\n     */\r\n    CortexM.prototype.init = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.dev.init()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.setupFpb()];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.readCoreType()];\r\n                    case 3:\r\n                        _a.sent();\r\n                        console.debug(\"Initialized.\");\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Read the current state of the CPU.\r\n     *\r\n     * @returns A member of the `CoreState` enum corresponding to the current status of the CPU.\r\n     */\r\n    CortexM.prototype.getState = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var dhcsr, newDHCSR;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.readMem(3758157296 /* DHCSR */)];\r\n                    case 1:\r\n                        dhcsr = _a.sent();\r\n                        if (!(dhcsr & 33554432 /* S_RESET_ST */)) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, this.readMem(3758157296 /* DHCSR */)];\r\n                    case 2:\r\n                        newDHCSR = _a.sent();\r\n                        if (newDHCSR & 33554432 /* S_RESET_ST */ && !(newDHCSR & 16777216 /* S_RETIRE_ST */)) {\r\n                            return [2 /*return*/, 0 /* TARGET_RESET */];\r\n                        }\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        if (dhcsr & 524288 /* S_LOCKUP */) {\r\n                            return [2 /*return*/, 1 /* TARGET_LOCKUP */];\r\n                        }\r\n                        else if (dhcsr & 262144 /* S_SLEEP */) {\r\n                            return [2 /*return*/, 2 /* TARGET_SLEEPING */];\r\n                        }\r\n                        else if (dhcsr & 131072 /* S_HALT */) {\r\n                            return [2 /*return*/, 3 /* TARGET_HALTED */];\r\n                        }\r\n                        else {\r\n                            return [2 /*return*/, 4 /* TARGET_RUNNING */];\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Read the CPUID register from the CPU, and interpret its meaning in terms of implementer,\r\n     * architecture and core type.\r\n     */\r\n    CortexM.prototype.readCoreType = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cpuid, implementer, arch, coreType;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.readMem(3758157056 /* CPUID */)];\r\n                    case 1:\r\n                        cpuid = _a.sent();\r\n                        implementer = ((cpuid & exports.CPUID_IMPLEMENTER_MASK) >> exports.CPUID_IMPLEMENTER_POS);\r\n                        arch = ((cpuid & exports.CPUID_ARCHITECTURE_MASK) >> exports.CPUID_ARCHITECTURE_POS);\r\n                        coreType = ((cpuid & exports.CPUID_PARTNO_MASK) >> exports.CPUID_PARTNO_POS);\r\n                        console.debug(\"Found an ARM \" + exports.CoreNames.get(coreType));\r\n                        return [2 /*return*/, [implementer, arch, coreType]];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Set up (and disable) the Flash Patch & Breakpoint unit. It will be enabled when\r\n     * the first breakpoint is set.\r\n     *\r\n     * Also reads the number of available hardware breakpoints.\r\n     */\r\n    CortexM.prototype.setupFpb = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var fpcr, nbCode, nbLit, i, b;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.readMem(3758104576 /* FP_CTRL */)];\r\n                    case 1:\r\n                        fpcr = _a.sent();\r\n                        nbCode = ((fpcr >> 8) & 0x70) | ((fpcr >> 4) & 0xf);\r\n                        nbLit = (fpcr >> 7) & 0xf;\r\n                        console.debug(nbCode + \" hardware breakpoints, \" + nbLit + \" literal comparators\");\r\n                        this.breakpoints = [];\r\n                        i = 0;\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        if (!(i < nbCode)) return [3 /*break*/, 5];\r\n                        b = new debug_1.Breakpoint(this, i);\r\n                        b.write(0);\r\n                        return [4 /*yield*/, this.breakpoints.push(b)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        _a.label = 4;\r\n                    case 4:\r\n                        i++;\r\n                        return [3 /*break*/, 2];\r\n                    case 5: return [4 /*yield*/, this.setFpbEnabled(false)];\r\n                    case 6:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Set breakpoints at specified memory addresses.\r\n     *\r\n     * @param addrs An array of memory addresses at which to set breakpoints.\r\n     */\r\n    CortexM.prototype.setBreakpoints = function (addrs) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var mapAddr, i;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        mapAddr = function (addr) {\r\n                            if (addr === null) {\r\n                                return 0;\r\n                            }\r\n                            else if ((addr & 3) === 2) {\r\n                                return 0x80000001 | (addr & ~3);\r\n                            }\r\n                            else if ((addr & 3) === 0) {\r\n                                return 0x40000001 | (addr & ~3);\r\n                            }\r\n                            else {\r\n                                console.error(\"uneven address\");\r\n                            }\r\n                        };\r\n                        if (addrs.length > this.breakpoints.length) {\r\n                            console.error(\"not enough hw breakpoints\");\r\n                        }\r\n                        return [4 /*yield*/, this.debugEnable()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.setFpbEnabled(true)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        while (addrs.length < this.breakpoints.length) {\r\n                            addrs.push(null);\r\n                        }\r\n                        i = 0;\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        if (!(i < addrs.length)) return [3 /*break*/, 6];\r\n                        return [4 /*yield*/, this.breakpoints[i].write(mapAddr(addrs[i]))];\r\n                    case 4:\r\n                        _a.sent();\r\n                        _a.label = 5;\r\n                    case 5:\r\n                        i++;\r\n                        return [3 /*break*/, 3];\r\n                    case 6: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Enable or disable the Flash Patch and Breakpoint unit (FPB).\r\n     *\r\n     * @param enabled\r\n     */\r\n    CortexM.prototype.setFpbEnabled = function (enabled) {\r\n        if (enabled === void 0) { enabled = true; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.writeMem(3758104576 /* FP_CTRL */, 2 /* FP_CTRL_KEY */ | (enabled ? 1 : 0))];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Write a 32-bit word to the specified (word-aligned) memory address.\r\n     *\r\n     * @param addr Memory address to write to\r\n     * @param data Data to write (values above 2**32 will be truncated)\r\n     */\r\n    CortexM.prototype.writeMem = function (addr, data) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.dev.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.dev.writeAp(4 /* TAR */, addr)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.dev.writeAp(12 /* DRW */, data)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Read a 32-bit word from the specified (word-aligned) memory address.\r\n     *\r\n     * @param addr Memory address to read from.\r\n     */\r\n    CortexM.prototype.readMem = function (addr) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.dev.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.dev.writeAp(4 /* TAR */, addr)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        _a.trys.push([3, 5, , 8]);\r\n                        return [4 /*yield*/, this.dev.readAp(12 /* DRW */)];\r\n                    case 4: return [2 /*return*/, _a.sent()];\r\n                    case 5:\r\n                        e_1 = _a.sent();\r\n                        // transfer wait, try again.\r\n                        return [4 /*yield*/, util_1.delay(100)];\r\n                    case 6:\r\n                        // transfer wait, try again.\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.readMem(addr)];\r\n                    case 7: return [2 /*return*/, _a.sent()];\r\n                    case 8: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reads a block of memory from the specified memory address.\r\n     *\r\n     * @param addr Address to read from\r\n     * @param words Number of words to read\r\n     * @param pageSize Memory page size\r\n     */\r\n    CortexM.prototype.readBlock = function (addr, words, pageSize) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            var funs, bufs, end, ptr, _loop_1, _i, funs_1, f;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        funs = [function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\r\n                                return [2 /*return*/, Promise.resolve()];\r\n                            }); }); }];\r\n                        bufs = [];\r\n                        end = addr + words * 4;\r\n                        ptr = addr;\r\n                        _loop_1 = function () {\r\n                            var nextptr = ptr + pageSize;\r\n                            if (ptr === addr) {\r\n                                nextptr &= ~(pageSize - 1);\r\n                            }\r\n                            var len = Math.min(nextptr - ptr, end - ptr);\r\n                            var ptr0 = ptr;\r\n                            util_1.assert((len & 3) === 0);\r\n                            funs.push(function () { return __awaiter(_this, void 0, void 0, function () {\r\n                                var _a, _b;\r\n                                return __generator(this, function (_c) {\r\n                                    switch (_c.label) {\r\n                                        case 0:\r\n                                            _b = (_a = bufs).push;\r\n                                            return [4 /*yield*/, this.readBlockCore(ptr0, len >> 2)];\r\n                                        case 1:\r\n                                            _b.apply(_a, [_c.sent()]);\r\n                                            return [2 /*return*/];\r\n                                    }\r\n                                });\r\n                            }); });\r\n                            ptr = nextptr;\r\n                        };\r\n                        while (ptr < end) {\r\n                            _loop_1();\r\n                        }\r\n                        _i = 0, funs_1 = funs;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        if (!(_i < funs_1.length)) return [3 /*break*/, 4];\r\n                        f = funs_1[_i];\r\n                        return [4 /*yield*/, f()];\r\n                    case 2:\r\n                        _a.sent();\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        _i++;\r\n                        return [3 /*break*/, 1];\r\n                    case 4: return [4 /*yield*/, util_1.bufferConcat(bufs)];\r\n                    case 5: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Write a block of memory to the specified memory address.\r\n     *\r\n     * @param addr Memory address to write to.\r\n     * @param words Array of 32-bit words to write to memory.\r\n     */\r\n    CortexM.prototype.writeBlock = function (addr, words) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var blSz, i;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (words.length === 0) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        console.debug(\"write block: 0x\" + addr.toString(16) + \" \" + words.length + \" len\");\r\n                        if (!(1 > 0)) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.writeBlockCore(addr, words)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        console.debug(\"written\");\r\n                        return [2 /*return*/];\r\n                    case 2:\r\n                        blSz = 10;\r\n                        i = 0;\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        if (!(i < Math.ceil(words.length / blSz))) return [3 /*break*/, 6];\r\n                        return [4 /*yield*/, this.writeBlockCore(addr + i * blSz * 4, words.slice(i * blSz, i * blSz + blSz))];\r\n                    case 4:\r\n                        _a.sent();\r\n                        _a.label = 5;\r\n                    case 5:\r\n                        i++;\r\n                        return [3 /*break*/, 3];\r\n                    case 6:\r\n                        console.debug(\"written\");\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Read a core register from the CPU (e.g. r0...r15, pc, sp, lr, s0...)\r\n     *\r\n     * @param no Member of the `CortexReg` enum - an ARM Cortex CPU general-purpose register.\r\n     */\r\n    CortexM.prototype.readCoreRegister = function (no) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var v;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.writeMem(3758157300 /* DCRSR */, no)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.readMem(3758157296 /* DHCSR */)];\r\n                    case 2:\r\n                        v = _a.sent();\r\n                        util_1.assert(v & 65536 /* S_REGRDY */);\r\n                        return [4 /*yield*/, this.readMem(3758157304 /* DCRDR */)];\r\n                    case 3: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Write a 32-bit word to the specified CPU general-purpose register.\r\n     *\r\n     * @param no Member of the `CortexReg` enum - an ARM Cortex CPU general-purpose register.\r\n     * @param val Value to be written.\r\n     */\r\n    CortexM.prototype.writeCoreRegister = function (no, val) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var v;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.writeMem(3758157304 /* DCRDR */, val)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.writeMem(3758157300 /* DCRSR */, no | 65536 /* DCRSR_REGWnR */)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.readMem(3758157296 /* DHCSR */)];\r\n                    case 3:\r\n                        v = _a.sent();\r\n                        util_1.assert(v & 65536 /* S_REGRDY */);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Halt the CPU core.\r\n     */\r\n    CortexM.prototype.halt = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.writeMem(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ | 1 /* C_DEBUGEN */ | 2 /* C_HALT */)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Resume the CPU core.\r\n     */\r\n    CortexM.prototype.resume = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.isHalted()];\r\n                    case 1:\r\n                        if (!_a.sent()) return [3 /*break*/, 4];\r\n                        return [4 /*yield*/, this.writeMem(3758157104 /* DFSR */, 4 /* DFSR_DWTTRAP */ | 2 /* DFSR_BKPT */ | 1 /* DFSR_HALTED */)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.debugEnable()];\r\n                    case 3:\r\n                        _a.sent();\r\n                        _a.label = 4;\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Find out whether the CPU is halted.\r\n     */\r\n    CortexM.prototype.isHalted = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var s;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.status()];\r\n                    case 1:\r\n                        s = _a.sent();\r\n                        return [2 /*return*/, s.isHalted];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Read the current status of the CPU.\r\n     *\r\n     * @returns Object containing the contents of the `DHCSR` register, the `DFSR` register, and a boolean value\r\n     * stating the current halted state of the CPU.\r\n     */\r\n    CortexM.prototype.status = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var dhcsr, dfsr;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.readMem(3758157296 /* DHCSR */)];\r\n                    case 1:\r\n                        dhcsr = _a.sent();\r\n                        return [4 /*yield*/, this.readMem(3758157104 /* DFSR */)];\r\n                    case 2:\r\n                        dfsr = _a.sent();\r\n                        return [2 /*return*/, {\r\n                                dfsr: dfsr,\r\n                                dhscr: dhcsr,\r\n                                isHalted: !!(dhcsr & 131072 /* S_HALT */),\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Enable debugging on the target CPU.\r\n     */\r\n    CortexM.prototype.debugEnable = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.writeMem(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ | 1 /* C_DEBUGEN */)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reset the CPU core. This currently does a software reset - it is also technically possible to perform a 'hard'\r\n     * reset using the reset pin from the debugger.\r\n     */\r\n    CortexM.prototype.reset = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var dhcsr;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.writeMem(3758157068 /* NVIC_AIRCR */, 100270080 /* NVIC_AIRCR_VECTKEY */ | 4 /* NVIC_AIRCR_SYSRESETREQ */)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.readMem(3758157296 /* DHCSR */)];\r\n                    case 2:\r\n                        dhcsr = _a.sent();\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        if (!((dhcsr & 33554432 /* S_RESET_ST */) !== 0)) return [3 /*break*/, 5];\r\n                        return [4 /*yield*/, this.readMem(3758157296 /* DHCSR */)];\r\n                    case 4:\r\n                        dhcsr = _a.sent();\r\n                        return [3 /*break*/, 3];\r\n                    case 5: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Snapshot the current state of the CPU. Reads all general-purpose registers, and returns them in an array. This\r\n     * should also snapshot the current stack state, but given that the stack location varies between individual CPUs,\r\n     * this functionality should be moved somewhere else.\r\n     *\r\n     * **TODO**: remove the code about the stack.\r\n     */\r\n    CortexM.prototype.snapshotMachineState = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var state, i, _a, _b;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        state = {\r\n                            registers: [],\r\n                            stack: [],\r\n                        };\r\n                        i = 0;\r\n                        _c.label = 1;\r\n                    case 1:\r\n                        if (!(i < 16)) return [3 /*break*/, 4];\r\n                        _a = state.registers;\r\n                        _b = i;\r\n                        return [4 /*yield*/, this.readCoreRegister(i)];\r\n                    case 2:\r\n                        _a[_b] = _c.sent();\r\n                        _c.label = 3;\r\n                    case 3:\r\n                        i++;\r\n                        return [3 /*break*/, 1];\r\n                    case 4: return [2 /*return*/, state];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Run specified machine code natively on the device. Assumes usual C calling conventions\r\n     * - returns the value of r0 once the program has terminated. The program _must_ terminate\r\n     * in order for this function to return. This can be achieved by placing a `bkpt`\r\n     * instruction at the end of the function.\r\n     *\r\n     * **FIXME**: currently causes a hard fault when the core is resumed after successfully uploading\r\n     * the blob to memory and setting core registers.\r\n     *\r\n     * @param code array containing the machine code (32-bit words).\r\n     * @param address memory address at which to place the code.\r\n     * @param pc initial value of the program counter.\r\n     * @param sp initial value of the stack pointer.\r\n     * @param lr initial value of the link register.\r\n     *\r\n     * @returns A promise for the value of r0 on completion of the function call.\r\n     */\r\n    CortexM.prototype.runCode = function (code, address, pc, lr, sp) {\r\n        if (sp === void 0) { sp = null; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: \r\n                    // Halt the core\r\n                    return [4 /*yield*/, this.halt()];\r\n                    case 1:\r\n                        // Halt the core\r\n                        _a.sent();\r\n                        // Point the program counter to the start of the program\r\n                        return [4 /*yield*/, this.writeCoreRegister(15 /* PC */, pc)];\r\n                    case 2:\r\n                        // Point the program counter to the start of the program\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.writeCoreRegister(14 /* LR */, lr)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.writeCoreRegister(13 /* SP */, sp)];\r\n                    case 4:\r\n                        _a.sent();\r\n                        // Write the program to memory at the specified address\r\n                        return [4 /*yield*/, this.writeBlock(address, code)];\r\n                    case 5:\r\n                        // Write the program to memory at the specified address\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.readCoreRegister(0 /* R0 */)];\r\n                    case 6: \r\n                    // Run the program\r\n                    // await this.resume();\r\n                    return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Step the processor forward by one instruction.\r\n     */\r\n    CortexM.prototype.step = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var dhcsr, interrupts_masked;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.readMem(3758157296 /* DHCSR */)];\r\n                    case 1:\r\n                        dhcsr = _a.sent();\r\n                        if (!(dhcsr & (4 /* C_STEP */ | 2 /* C_HALT */))) {\r\n                            console.error(\"Target is not halted.\");\r\n                            return [2 /*return*/];\r\n                        }\r\n                        interrupts_masked = (8 /* C_MASKINTS */ & dhcsr) !== 0;\r\n                        if (!!interrupts_masked) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, this.writeMem(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ | 1 /* C_DEBUGEN */ | 2 /* C_HALT */ | 8 /* C_MASKINTS */)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        _a.label = 3;\r\n                    case 3: return [4 /*yield*/, this.writeMem(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ | 1 /* C_DEBUGEN */ | 8 /* C_MASKINTS */ | 4 /* C_STEP */)];\r\n                    case 4:\r\n                        _a.sent();\r\n                        _a.label = 5;\r\n                    case 5: return [4 /*yield*/, this.readMem(3758157296 /* DHCSR */)];\r\n                    case 6:\r\n                        if (!!((_a.sent()) & 2 /* C_HALT */)) return [3 /*break*/, 7];\r\n                        return [3 /*break*/, 5];\r\n                    case 7:\r\n                        this.writeMem(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ | 1 /* C_DEBUGEN */ | 2 /* C_HALT */);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    CortexM.prototype.readBlockCore = function (addr, words) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var lastSize, bufs, blocks, i, b;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.dev.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.dev.writeAp(4 /* TAR */, addr)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        lastSize = words % 15;\r\n                        if (lastSize === 0) {\r\n                            lastSize = 15;\r\n                        }\r\n                        bufs = [];\r\n                        blocks = [];\r\n                        i = 0;\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        if (!(i < Math.ceil(words / 15))) return [3 /*break*/, 6];\r\n                        return [4 /*yield*/, this.dev.readRegRepeat(util_1.apReg(12 /* DRW */, 2 /* READ */), i === blocks.length - 1 ? lastSize : 15)];\r\n                    case 4:\r\n                        b = _a.sent();\r\n                        blocks.push(b);\r\n                        _a.label = 5;\r\n                    case 5:\r\n                        i++;\r\n                        return [3 /*break*/, 3];\r\n                    case 6: return [2 /*return*/, util_1.bufferConcat(blocks)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    CortexM.prototype.writeBlockCore = function (addr, words) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var blSz, reg, i, e_2;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 7, , 12]);\r\n                        return [4 /*yield*/, this.dev.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.dev.writeAp(4 /* TAR */, addr)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        blSz = 12;\r\n                        reg = util_1.apReg(12 /* DRW */, 0 /* WRITE */);\r\n                        i = 0;\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        if (!(i < Math.ceil(words.length / blSz))) return [3 /*break*/, 6];\r\n                        return [4 /*yield*/, this.dev.writeRegRepeat(reg, words.slice(i * blSz, i * blSz + blSz))];\r\n                    case 4:\r\n                        _a.sent();\r\n                        _a.label = 5;\r\n                    case 5:\r\n                        i++;\r\n                        return [3 /*break*/, 3];\r\n                    case 6: return [3 /*break*/, 12];\r\n                    case 7:\r\n                        e_2 = _a.sent();\r\n                        if (!e_2.dapWait) return [3 /*break*/, 10];\r\n                        console.debug(\"transfer wait, write block\");\r\n                        return [4 /*yield*/, util_1.delay(100)];\r\n                    case 8:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.writeBlockCore(addr, words)];\r\n                    case 9: return [2 /*return*/, _a.sent()];\r\n                    case 10: throw e_2;\r\n                    case 11: return [3 /*break*/, 12];\r\n                    case 12: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return CortexM;\r\n}());\r\nexports.CortexM = CortexM;\r\n//# sourceMappingURL=cortex_m.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../dapjs/built/cortex_m.js\n// module id = 3\n// module chunks = 0","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Breakpoint = (function () {\r\n    function Breakpoint(parent, index) {\r\n        this.parent = parent;\r\n        this.index = index;\r\n    }\r\n    Breakpoint.prototype.read = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var n;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.parent.readMem(3758104584 /* FP_COMP0 */ + this.index * 4)];\r\n                    case 1:\r\n                        n = _a.sent();\r\n                        console.log(\"idx=\" + this.index + \", CURR=\" + n + \", LAST=\" + this.lastWritten);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Breakpoint.prototype.write = function (num) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                this.lastWritten = num;\r\n                return [2 /*return*/, this.parent.writeMem(3758104584 /* FP_COMP0 */ + this.index * 4, num)];\r\n            });\r\n        });\r\n    };\r\n    return Breakpoint;\r\n}());\r\nexports.Breakpoint = Breakpoint;\r\n//# sourceMappingURL=debug.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../dapjs/built/debug.js\n// module id = 4\n// module chunks = 0","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar dap_1 = require(\"./dap\");\r\nvar util_1 = require(\"./util\");\r\nvar Device = (function () {\r\n    function Device(device) {\r\n        this.device = device;\r\n        this.dap = new dap_1.Dap(device);\r\n    }\r\n    Device.prototype.reconnect = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.clearCaches();\r\n                        return [4 /*yield*/, this.dap.disconnect()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, util_1.delay(100)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.init()];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Device.prototype.init = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var n, m, v;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.dap.connect()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.readDp(0 /* IDCODE */)];\r\n                    case 2:\r\n                        n = _a.sent();\r\n                        this.idcode = n;\r\n                        return [4 /*yield*/, this.writeReg(0 /* DP_0x0 */, 1 << 2)];\r\n                    case 3:\r\n                        _a.sent(); // clear sticky error\r\n                        return [4 /*yield*/, this.writeDp(2 /* SELECT */, 0)];\r\n                    case 4:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.writeDp(1 /* CTRL_STAT */, 1073741824 /* CSYSPWRUPREQ */ | 268435456 /* CDBGPWRUPREQ */)];\r\n                    case 5:\r\n                        _a.sent();\r\n                        m = 536870912 /* CDBGPWRUPACK */ | 2147483648 /* CSYSPWRUPACK */;\r\n                        return [4 /*yield*/, this.readDp(1 /* CTRL_STAT */)];\r\n                    case 6:\r\n                        v = _a.sent();\r\n                        _a.label = 7;\r\n                    case 7:\r\n                        if (!((v & m) !== m)) return [3 /*break*/, 9];\r\n                        return [4 /*yield*/, this.readDp(1 /* CTRL_STAT */)];\r\n                    case 8:\r\n                        v = _a.sent();\r\n                        return [3 /*break*/, 7];\r\n                    case 9: return [4 /*yield*/, this.writeDp(1 /* CTRL_STAT */, (1073741824 /* CSYSPWRUPREQ */ |\r\n                            268435456 /* CDBGPWRUPREQ */ |\r\n                            0 /* TRNNORMAL */ |\r\n                            3840 /* MASKLANE */))];\r\n                    case 10:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.writeDp(2 /* SELECT */, 0)];\r\n                    case 11:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.readAp(252 /* IDR */)];\r\n                    case 12:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Device.prototype.writeReg = function (regId, val) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.regOp(regId, val)];\r\n            });\r\n        });\r\n    };\r\n    Device.prototype.readReg = function (regId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var buf, v;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.regOp(regId, null)];\r\n                    case 1:\r\n                        buf = _a.sent();\r\n                        v = util_1.readUInt32LE(buf, 3);\r\n                        return [2 /*return*/, v];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Device.prototype.readDp = function (addr) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.readReg(addr)];\r\n            });\r\n        });\r\n    };\r\n    Device.prototype.readAp = function (addr) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.writeDp(2 /* SELECT */, util_1.bank(addr))];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.readReg(util_1.apReg(addr, 2 /* READ */))];\r\n                    case 2: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Device.prototype.writeDp = function (addr, data) {\r\n        if (addr === 2 /* SELECT */) {\r\n            if (data === this.dpSelect) {\r\n                return Promise.resolve();\r\n            }\r\n            this.dpSelect = data;\r\n        }\r\n        return this.writeReg(addr, data);\r\n    };\r\n    Device.prototype.writeAp = function (addr, data) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.writeDp(2 /* SELECT */, util_1.bank(addr))];\r\n                    case 1:\r\n                        _a.sent();\r\n                        if (addr === 0 /* CSW */) {\r\n                            if (data === this.csw) {\r\n                                return [2 /*return*/, Promise.resolve()];\r\n                            }\r\n                            this.csw = data;\r\n                        }\r\n                        return [4 /*yield*/, this.writeReg(util_1.apReg(addr, 0 /* WRITE */), data)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Device.prototype.close = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.device.close()];\r\n            });\r\n        });\r\n    };\r\n    Device.prototype.readRegRepeat = function (regId, cnt) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var request, sendargs, i, buf;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        util_1.assert(cnt <= 15);\r\n                        request = util_1.regRequest(regId);\r\n                        sendargs = [0, cnt];\r\n                        for (i = 0; i < cnt; ++i) {\r\n                            sendargs.push(request);\r\n                        }\r\n                        return [4 /*yield*/, this.dap.cmdNums(5 /* DAP_TRANSFER */, sendargs)];\r\n                    case 1:\r\n                        buf = _a.sent();\r\n                        if (buf[1] !== cnt) {\r\n                            throw new Error((\"(many) Bad #trans \" + buf[1]));\r\n                        }\r\n                        else if (buf[2] !== 1) {\r\n                            throw new Error((\"(many) Bad transfer status \" + buf[2]));\r\n                        }\r\n                        return [2 /*return*/, buf.slice(3, 3 + cnt * 4)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Device.prototype.writeRegRepeat = function (regId, data) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var request, sendargs, _i, data_1, d, buf;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        util_1.assert(data.length <= 15);\r\n                        request = util_1.regRequest(regId, true);\r\n                        sendargs = [0, data.length];\r\n                        for (_i = 0, data_1 = data; _i < data_1.length; _i++) {\r\n                            d = data_1[_i];\r\n                            sendargs.push(request);\r\n                            util_1.addInt32(sendargs, d);\r\n                        }\r\n                        return [4 /*yield*/, this.dap.cmdNums(5 /* DAP_TRANSFER */, sendargs)];\r\n                    case 1:\r\n                        buf = _a.sent();\r\n                        if (buf[2] !== 1) {\r\n                            throw new Error((\"(many-wr) Bad transfer status \" + buf[2]));\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Device.prototype.clearCaches = function () {\r\n        delete this.dpSelect;\r\n        delete this.csw;\r\n        for (var _i = 0, _a = this.breakpoints; _i < _a.length; _i++) {\r\n            var b = _a[_i];\r\n            delete b.lastWritten;\r\n        }\r\n    };\r\n    Device.prototype.regOp = function (regId, val) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var request, sendargs, buf;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        request = util_1.regRequest(regId, val !== null);\r\n                        sendargs = [0, 1, request];\r\n                        if (val !== null) {\r\n                            util_1.addInt32(sendargs, val);\r\n                        }\r\n                        return [4 /*yield*/, this.dap.cmdNums(5 /* DAP_TRANSFER */, sendargs)];\r\n                    case 1:\r\n                        buf = _a.sent();\r\n                        if (buf[1] !== 1) {\r\n                            console.error(\"Make sure you have initialised the DAP connection.\");\r\n                            throw new Error((\"Bad #trans \" + buf[1]));\r\n                        }\r\n                        else if (buf[2] !== 1) {\r\n                            if (buf[2] === 2) {\r\n                                throw new Error((\"Transfer wait\"));\r\n                            }\r\n                            throw new Error((\"Bad transfer status \" + buf[2]));\r\n                        }\r\n                        return [2 /*return*/, buf];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return Device;\r\n}());\r\nexports.Device = Device;\r\n//# sourceMappingURL=device.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../dapjs/built/device.js\n// module id = 5\n// module chunks = 0","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar util_1 = require(\"./util\");\r\nvar Dap = (function () {\r\n    function Dap(hid) {\r\n        this.sent = [];\r\n        this.waiting = [];\r\n        this.maxSent = 1;\r\n        this.hid = hid;\r\n    }\r\n    Dap.prototype.resetTarget = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.cmdNums(10 /* DAP_RESET_TARGET */, [])];\r\n            });\r\n        });\r\n    };\r\n    Dap.prototype.disconnect = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.cmdNums(3 /* DAP_DISCONNECT */, [])];\r\n            });\r\n        });\r\n    };\r\n    Dap.prototype.cmdNums = function (op, data) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var buf;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        data.unshift(op);\r\n                        return [4 /*yield*/, this.send(data)];\r\n                    case 1:\r\n                        buf = _a.sent();\r\n                        if (buf[0] !== op) {\r\n                            throw new Error(\"Bad response for \" + op + \" -> \" + buf[0]);\r\n                        }\r\n                        switch (op) {\r\n                            case 2 /* DAP_CONNECT */:\r\n                            case 0 /* DAP_INFO */:\r\n                            case 5 /* DAP_TRANSFER */:\r\n                                break;\r\n                            default:\r\n                                if (buf[1] !== 0) {\r\n                                    throw new Error(\"Bad status for \" + op + \" -> \" + buf[1]);\r\n                                }\r\n                        }\r\n                        return [2 /*return*/, buf];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Dap.prototype.connect = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var v, buf;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        console.log(\"Connecting...\");\r\n                        return [4 /*yield*/, this.info(254 /* PACKET_COUNT */)];\r\n                    case 1:\r\n                        v = _a.sent();\r\n                        if (v) {\r\n                            this.maxSent = v;\r\n                        }\r\n                        else {\r\n                            throw new Error(\"DAP_INFO returned invalid packet count.\");\r\n                        }\r\n                        return [4 /*yield*/, this.cmdNums(17 /* DAP_SWJ_CLOCK */, util_1.addInt32(null, 1000000))];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.cmdNums(2 /* DAP_CONNECT */, [0])];\r\n                    case 3:\r\n                        buf = _a.sent();\r\n                        if (buf[1] !== 1) {\r\n                            throw new Error(\"SWD mode not enabled.\");\r\n                        }\r\n                        return [4 /*yield*/, this.cmdNums(17 /* DAP_SWJ_CLOCK */, util_1.addInt32(null, 1000000))];\r\n                    case 4:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.cmdNums(4 /* DAP_TRANSFER_CONFIGURE */, [0, 0x50, 0, 0, 0])];\r\n                    case 5:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.cmdNums(19 /* DAP_SWD_CONFIGURE */, [0])];\r\n                    case 6:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.jtagToSwd()];\r\n                    case 7:\r\n                        _a.sent();\r\n                        console.log(\"Connected\");\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Dap.prototype.sendNums = function (lst) {\r\n        lst.unshift(0);\r\n        while (lst.length < 64) {\r\n            lst.push(0);\r\n        }\r\n        this.send(lst);\r\n    };\r\n    Dap.prototype.jtagToSwd = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var arrs, _i, arrs_1, arr;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        arrs = [\r\n                            [56, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\r\n                            [16, 0x9e, 0xe7],\r\n                            [56, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\r\n                            [8, 0x00],\r\n                        ];\r\n                        _i = 0, arrs_1 = arrs;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        if (!(_i < arrs_1.length)) return [3 /*break*/, 4];\r\n                        arr = arrs_1[_i];\r\n                        return [4 /*yield*/, this.swjSequence(arr)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        _i++;\r\n                        return [3 /*break*/, 1];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Dap.prototype.swjSequence = function (data) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.cmdNums(18 /* DAP_SWJ_SEQUENCE */, data)];\r\n            });\r\n        });\r\n    };\r\n    Dap.prototype.info = function (id) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var buf;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.cmdNums(0 /* DAP_INFO */, [id])];\r\n                    case 1:\r\n                        buf = _a.sent();\r\n                        if (buf[1] === 0) {\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        switch (id) {\r\n                            case 240 /* CAPABILITIES */:\r\n                            case 254 /* PACKET_COUNT */:\r\n                            case 255 /* PACKET_SIZE */:\r\n                                if (buf[1] === 1) {\r\n                                    return [2 /*return*/, buf[2]];\r\n                                }\r\n                                else if (buf[1] === 2) {\r\n                                    return [2 /*return*/, buf[3] << 8 | buf[2]];\r\n                                }\r\n                        }\r\n                        return [2 /*return*/, buf.slice(2, buf[1] + 2 - 1)]; // .toString(\"utf8\")\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Dap.prototype.send = function (command) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var array, response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        array = Uint8Array.from(command);\r\n                        return [4 /*yield*/, this.hid.write(array.buffer)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.hid.read()];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        return [2 /*return*/, new Uint8Array(response.buffer)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return Dap;\r\n}());\r\nexports.Dap = Dap;\r\n//# sourceMappingURL=dap.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../dapjs/built/dap.js\n// module id = 6\n// module chunks = 0","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction bufferExtend(source, length) {\n    var sarr = new Uint8Array(source);\n    var dest = new ArrayBuffer(length);\n    var darr = new Uint8Array(dest);\n    for (var i = 0; i < Math.min(source.byteLength, length); i++) {\n        darr[i] = sarr[i];\n    }\n    return dest;\n}\nvar HID = (function () {\n    function HID(device) {\n        this.device = device;\n    }\n    HID.prototype.open = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var hids, _i, _a, endpoint;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.device.open()];\n                    case 1:\n                        _b.sent();\n                        return [4 /*yield*/, this.device.selectConfiguration(1)];\n                    case 2:\n                        _b.sent();\n                        hids = this.device.configuration.interfaces.filter(function (intf) { return intf.alternates[0].interfaceClass == 0x03; });\n                        if (hids.length == 0) {\n                            throw 'No HID interfaces found.';\n                        }\n                        this.interfaces = hids;\n                        if (this.interfaces.length == 1) {\n                            this.interface = this.interfaces[0];\n                        }\n                        return [4 /*yield*/, this.device.claimInterface(this.interface.interfaceNumber)];\n                    case 3:\n                        _b.sent();\n                        this.endpoints = this.interface.alternates[0].endpoints;\n                        this.ep_in = null;\n                        this.ep_out = null;\n                        for (_i = 0, _a = this.endpoints; _i < _a.length; _i++) {\n                            endpoint = _a[_i];\n                            if (endpoint.direction == 'in') {\n                                this.ep_in = endpoint;\n                            }\n                            else {\n                                this.ep_out = endpoint;\n                            }\n                        }\n                        if (this.ep_in == null || this.ep_out == null) {\n                            console.log('Unable to find an in and an out endpoint.');\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    HID.prototype.close = function () {\n        return this.device.close();\n    };\n    HID.prototype.write = function (data) {\n        var report_size = this.ep_out.packetSize;\n        var buffer = bufferExtend(data, report_size);\n        return this.device.transferOut(this.ep_out.endpointNumber, buffer);\n    };\n    HID.prototype.read = function () {\n        var report_size = this.ep_in.packetSize;\n        return this.device.transferIn(this.ep_in.endpointNumber, report_size)\n            .then(function (res) { return res.data; });\n    };\n    return HID;\n}());\nexports.default = HID;\n//# sourceMappingURL=hid.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/webhid/bin/hid.js\n// module id = 7\n// module chunks = 0","import {CoreState, CortexM, CortexReg, CortexSpecialReg, Device} from \"dapjs\";\r\nimport {K64F_FLASH_ALGO} from \"./k64f_flash\";\r\n\r\n/**\r\n * Specifies all of the parameters associated with a flashing algorithm for a particular device. These\r\n * can be found in the pyOCD or DAPLink sources, or compiled from the source that can be found here:\r\n * https://github.com/mbedmicro/FlashAlgo.\r\n *\r\n * **TODO**: add JavaScript as a third target for FlashAlgo's output.\r\n */\r\ninterface IFlashAlgo {\r\n    loadAddress: number;\r\n    pcInit: number;\r\n    pcEraseAll: number;\r\n    pcEraseSector: number;\r\n    pcProgramPage: number;\r\n    stackPointer: number;\r\n    staticBase: number;\r\n    instructions: number[];\r\n    breakpointLocation: number;\r\n}\r\n\r\nexport class K64F extends CortexM {\r\n    private flashAlgo: IFlashAlgo;\r\n\r\n    constructor(device: Device) {\r\n        super(device);\r\n\r\n        this.flashAlgo = K64F_FLASH_ALGO;\r\n    }\r\n\r\n    /**\r\n     * Initialise the flash driver on the chip. Must be called before any of the other\r\n     * flash-related methods.\r\n     *\r\n     * **TODO**: check that this has been called before calling other flash methods.\r\n     */\r\n    public async flashInit() {\r\n        await this.halt();\r\n\r\n        await this.writeCoreRegister(CortexReg.R9, this.flashAlgo.staticBase);\r\n\r\n        const result = await this.runCode(\r\n            this.flashAlgo.instructions,\r\n            this.flashAlgo.loadAddress,\r\n            this.flashAlgo.pcInit + this.flashAlgo.loadAddress + 0x20,\r\n            this.flashAlgo.stackPointer,\r\n            this.flashAlgo.breakpointLocation,\r\n        );\r\n\r\n        console.log(`run! ${result}`);\r\n\r\n        // if (result !== 0) {\r\n        //     // throw new Error(\"Invalid result code running flash init.\");\r\n        // }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Upload a binary blob to (non-volatile) flash memory, at the specified address. Uses the\r\n     * flashing algorithm relevant to the particular part - if you just want to upload to RAM,\r\n     * use `this.writeBlock`.\r\n     *\r\n     * @param code an array of 32-bit words representing the binary data to be uploaded.\r\n     * @param address starting address of the location in memory to upload to.\r\n     */\r\n    public async flash(code: number[], address = 0x0) {\r\n        throw new Error(\"Not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Erase _all_ data stored in flash on the chip.\r\n     */\r\n    public async eraseChip() {\r\n        const result = await this.runCode(\r\n            this.flashAlgo.instructions,\r\n            this.flashAlgo.loadAddress,\r\n            this.flashAlgo.pcEraseAll,\r\n            this.flashAlgo.breakpointLocation,\r\n        );\r\n        const finalPC = await this.readCoreRegister(CortexReg.PC);\r\n\r\n        console.log(result, finalPC.toString(16));\r\n        return result;\r\n    }\r\n\r\n    private async resetStopOnReset() {\r\n        console.log(\"reset stop on Reset\");\r\n\r\n        await this.halt();\r\n\r\n        const demcr = await this.readMem(CortexSpecialReg.DEMCR);\r\n\r\n        await this.writeMem(CortexSpecialReg.DEMCR, demcr | CortexSpecialReg.DEMCR_VC_CORERESET);\r\n        await this.reset();\r\n\r\n        while (!(await this.isHalted())) { /* spin */ }\r\n\r\n        await this.writeMem(CortexSpecialReg.DEMCR, demcr);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/targets.ts","/*\r\n Flash OS Routines (Automagically Generated)\r\n Copyright (c) 2017-2017 ARM Limited\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n     http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n*/\r\n\r\nexport const K64F_FLASH_ALGO = {\r\n\r\n        // Flash algorithm as a hex string\r\n        instructions: [\r\n             0xb510483e, 0x5120f24c, 0xf64d81c1, 0x81c11128, 0xf0218801, 0x80010101, 0x78414839, 0x0160f001,\r\n            0xbf0c2940, 0x21002101, 0x444a4a36, 0xb1397011, 0xf0217841, 0x70410160, 0xf0117841, 0xd1fb0f60,\r\n            0x44484831, 0xf864f000, 0xbf182800, 0xbd102001, 0x4448482c, 0xb1587800, 0x78414829, 0x0160f021,\r\n            0x0140f041, 0x78417041, 0x0160f001, 0xd1fa2940, 0x47702000, 0xb5104824, 0x44484924, 0xf891f000,\r\n            0xbf182800, 0x2100bd10, 0xe8bd481f, 0x44484010, 0xb958f000, 0x4c1cb570, 0x444c4605, 0x4b1b4601,\r\n            0x68e24620, 0xf8b6f000, 0xbf182800, 0x2300bd70, 0x68e24629, 0x4070e8bd, 0x44484813, 0xb94cf000,\r\n            0x460cb570, 0x4606460b, 0x480f4601, 0x4615b084, 0xf0004448, 0x2800f8eb, 0xb004bf1c, 0x2000bd70,\r\n            0xe9cd2101, 0x90021000, 0x462b4807, 0x46314622, 0xf0004448, 0xb004f97f, 0x0000bd70, 0x40052000,\r\n            0x4007e000, 0x00000004, 0x00000008, 0x6b65666b, 0xbf042800, 0x47702004, 0x6cc949ea, 0x6103f3c1,\r\n            0xbf08290f, 0x1180f44f, 0x4ae7bf1f, 0xf832447a, 0x02891011, 0xe9c02200, 0x21022100, 0x61426081,\r\n            0x618202c9, 0x1203e9c0, 0x52a0f04f, 0x2108e9c0, 0x47702000, 0xbf0e2800, 0x61012004, 0x47702000,\r\n            0x48da4602, 0x49d96840, 0x0070f440, 0x47706048, 0x217048d7, 0x21807001, 0x78017001, 0x0f80f011,\r\n            0x7800d0fb, 0x0f20f010, 0x2067bf1c, 0xf0104770, 0xbf1c0f10, 0x47702068, 0x0001f010, 0x2069bf18,\r\n            0x28004770, 0x2004bf04, 0xb5104770, 0x4ac84604, 0x403bf06f, 0x48c76050, 0xbf144281, 0x2000206b,\r\n            0xbf182800, 0x4620bd10, 0xffd2f7ff, 0x46204603, 0xffc6f7ff, 0xbd104618, 0xbf042800, 0x47702004,\r\n            0x60532300, 0x60d36093, 0x61536113, 0x61d36193, 0x68c16011, 0xe9d06051, 0xfbb11001, 0x6090f0f0,\r\n            0x21102008, 0x0103e9c2, 0x1005e9c2, 0x61d02004, 0x47702000, 0x4df0e92d, 0x4615b088, 0x460c4698,\r\n            0x466a4682, 0xffd8f7ff, 0x4621462a, 0x9b044650, 0xf931f000, 0xbf1c0007, 0xe8bdb008, 0xe9dd8df0,\r\n            0x19604600, 0xfbb51e45, 0xfb06f0f6, 0xb1205010, 0xf0f6fbb5, 0x43701c40, 0x42ac1e45, 0xf8dfbf98,\r\n            0xd81cb270, 0x407ff024, 0x6010f040, 0x0004f8cb, 0x45804898, 0x206bbf14, 0x28002000, 0xb008bf1c,\r\n            0x8df0e8bd, 0xf7ff4650, 0x4607ff73, 0x0010f8da, 0xbf182800, 0xb9174780, 0x42ac4434, 0x4650d9e2,\r\n            0xff5ef7ff, 0x4638b008, 0x8df0e8bd, 0xbf042a00, 0x47702004, 0x45f0e92d, 0x4614b089, 0x460d461e,\r\n            0x466a4680, 0xff88f7ff, 0x46294632, 0x9b034640, 0xf8e1f000, 0xbf1c0007, 0xe8bdb009, 0x9d0085f0,\r\n            0xbf182e00, 0xa1e8f8df, 0xf854d025, 0xf8ca0b04, 0x98030008, 0xbf042804, 0x407ff025, 0x60c0f040,\r\n            0x2808d009, 0xf854d109, 0xf8ca0b04, 0xf025000c, 0xf040407f, 0xf8ca60e0, 0x46400004, 0xff28f7ff,\r\n            0x1010f8d8, 0x29004607, 0x4788bf18, 0x9803b91f, 0x1a364405, 0x4640d1d9, 0xff12f7ff, 0x4638b009,\r\n            0x85f0e8bd, 0xbf042800, 0x47702004, 0xea424a62, 0x4a5f4101, 0xe70b6051, 0x4dffe92d, 0x4614b088,\r\n            0x460d469a, 0x9808466a, 0xff36f7ff, 0x46294622, 0x98089b05, 0xf88ff000, 0xbf1c2800, 0xe8bdb00c,\r\n            0x466a8df0, 0x98084629, 0xff26f7ff, 0xf8dd9e00, 0x42708008, 0x0100f1c8, 0x42474008, 0xbf0842b7,\r\n            0x2c004447, 0xf8dfbf18, 0xd01fb128, 0x42a51bbd, 0x4625bf88, 0xf0269805, 0xfbb5417f, 0xf041f0f0,\r\n            0xf8cb7180, 0x04001004, 0x200aea40, 0x00fff040, 0x0008f8cb, 0xf7ff9808, 0x2800fecb, 0xb00cbf1c,\r\n            0x8df0e8bd, 0x442e1b64, 0xd1df4447, 0x2000b00c, 0x8df0e8bd, 0xbf042b00, 0x47702004, 0x4dffe92d,\r\n            0x4616b088, 0x7a14e9dd, 0x460c461d, 0xf8dd466a, 0x98088058, 0xfee0f7ff, 0x3007e9dd, 0x46214632,\r\n            0xf839f000, 0xbf1c2800, 0xe8bdb00c, 0x9c008df0, 0xbf042e00, 0xe8bdb00c, 0xf8df8df0, 0xf06fb094,\r\n            0xea40407f, 0xf0246707, 0xf040407f, 0xf8cb7000, 0xf8cb0004, 0x68287008, 0x000cf8cb, 0xf7ff9808,\r\n            0xb168fe87, 0x0f00f1ba, 0xf8cabf18, 0xf1b84000, 0xbf1c0f00, 0xf8c82100, 0xb00c1000, 0x8df0e8bd,\r\n            0x1a769907, 0x0103f021, 0x9907440d, 0xd1da440c, 0xe8bdb00c, 0x28008df0, 0x2004bf04, 0xf1a34770,\r\n            0x42190301, 0x421abf0e, 0x47702065, 0x428b6803, 0x6840d806, 0x44184411, 0xbf244288, 0x47702000,\r\n            0x47702066, 0x40048000, 0x000003b4, 0x4001f000, 0x40020000, 0x6b65666b, 0x4000ffff, 0x40020004,\r\n            0x40020010, 0x00100008, 0x00200018, 0x00400030, 0x00800060, 0x010000c0, 0x02000180, 0x04000300,\r\n            0x00000600, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\r\n            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\r\n        ],\r\n\r\n        // Relative function addresses\r\n        pcInit: 0x1,\r\n        pcUnInit: 0x51,\r\n        pcProgramPage: 0xc1,\r\n        pcEraseSector: 0x95,\r\n        pcEraseAll: 0x75,\r\n\r\n        // Relative region addresses and sizes\r\n        roStart: 0x0,\r\n        roSize: 0x504,\r\n        rwStart: 0x504,\r\n        rwSize: 0x8,\r\n        ziStart: 0x50c,\r\n        ziSize: 0x34,\r\n\r\n        // Flash information\r\n        flashStart: 0x0,\r\n        flashSize: 0x0,\r\n        pageSize: 0x400,\r\n        sectorSizes: [\r\n            [0x0, 0x400],\r\n        ],\r\n\r\n        breakpointLocation: 0x20000001,\r\n        staticBase: 0x20000524,\r\n        stackPointer: 0x20000800,\r\n        loadAddress: 0x20000000,\r\n    };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/k64f_flash.ts"],"sourceRoot":""}