{"version":3,"sources":["webpack:///webpack/bootstrap 4477518385c72172f758","webpack:///../dapjs/built/util.js","webpack:///../dapjs/built/main.js","webpack:///../dapjs/built/core/cortex_m.js","webpack:///../dapjs/built/dap.js","webpack:///./src/main.ts","webpack:///../dapjs/built/debug/debug.js","webpack:///../dapjs/built/debug/breakpoint.js","webpack:///../dapjs/built/core/memory.js","webpack:///../dapjs/built/transport/cmsis_dap.js","webpack:///../dapjs/built/targets/FlashTarget.js","webpack:///../dapjs/built/targets/K64F.js","webpack:///../dapjs/built/targets/NRF51.js","webpack:///../dapjs/built/targets/FlashProgram.js","webpack:///./node_modules/webhid/bin/hid.js","webpack:///./src/device_selector.ts","webpack:///./src/logger.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC7DA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA,gC;;;;;;;ACpGA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;ACbA;AACA,8CAA8C,cAAcsCAAsC,gCAAgC;AACtuBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;AChQA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnuBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+B;;;;;;;;;ACtNA,uCAAmE;AACnE,uCAA8D;AAC9D,yCAAyB;AAEzB,kDAAmD;AACnD,yCAAkC;AAMlC,MAAM,WAAW,GAAG,CAAC,GAAa;IAC9B,IAAI,CAAC,GAAG,EAAE,CAAC;IACX,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;QAClC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAE1F,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACvB,CAAC,IAAI,IAAI,CAAC;QACd,CAAC;IACL,CAAC;IACD,MAAM,CAAC,CAAC,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,oBAAoB,GAAG,CAAC,CAAgB;IAC1C,MAAM,CAAC,SAAS,GAAG,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;AAChD,CAAC,CAAC;AAEF;IAuBI,YAAY,MAAkB;QAqC9B;;;WAGG;QACK,WAAM,GAAG,KAAK;YAClB,IAAI,CAAC,MAAM,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,OAAO,EAAE,CAAC,EAAC,QAAQ,EAAE,MAAM,EAAC,CAAC,EAAC,CAAC,CAAC;YAClF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAEvD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAE/D,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzB,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;YAEvB,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,IAAI,CAAC;YAClC,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,KAAK,CAAC;QACxC,CAAC;QAED;;;WAGG;QACK,YAAO,GAAG,KAAK;YACnB,IAAI,CAAC,GAAG,GAAG,IAAI,gBAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAEhC,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;YAE5B,kBAAkB;YAClB,MAAM,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;YAEtB,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;YAE3B,IAAI,CAAC,SAAS,GAAG,IAAI,WAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,GAAG,IAAI,mBAAW,CAAC,IAAI,CAAC,SAAS,EAAE,oBAAY,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAEjF,IAAI,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YAEjC,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YAEzB,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;YAE5B,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YAEzB,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;YAE3B,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;YAC1D,IAAI,CAAC,GAAG,CAAC,uBAAuB,iBAAS,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,gBAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAE9E,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;YACxB,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,IAAI,CAAC;YAEnC,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAE1E,GAAG,CAAC,CAAC,MAAM,IAAI,IAAI,QAAQ,CAAC,CAAC,CAAC;gBACzB,IAA0B,CAAC,QAAQ,GAAG,KAAK,CAAC;YACjD,CAAC;QACL,CAAC;QAEO,UAAK,GAAG,KAAK,EAAE,CAAS;YAC5B,cAAc;YACd,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YAEzB,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;YAEvD,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAEf,MAAM,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;YACjC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,MAAM,CAAC,CAAC,CAAC;gBAC7B,CAAC,IAAI,MAAM,CAAC;gBACZ,GAAG,CAAC,YAAY,GAAG,MAAM,CAAC;YAC9B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,CAAC,IAAI,MAAM,CAAC;gBACZ,GAAG,CAAC,YAAY,GAAG,aAAa,CAAC;YACrC,CAAC;YACD,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;YAEzB,GAAG,CAAC,MAAM,GAAG,KAAK,EAAE,CAAM;gBACtB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,MAAM,CAAC,CAAC,CAAC;oBAC7B,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;oBAExC,MAAM,OAAO,GAAG,oBAAY,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;oBAC5D,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,QAAgB;wBAChD,yBAAyB;wBACzB,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,QAAQ,GAAG,GAAG,GAAG,CAAC;oBAC7D,CAAC,CAAC,CAAC;oBAEH,IAAI,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;oBACzC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBAElB,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;gBAC9B,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;oBAEtC,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBAC5C,MAAM,OAAO,GAAG,oBAAY,CAAC,UAAU,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;oBAElD,IAAI,CAAC,GAAG,CAAC,eAAe,KAAK,CAAC,MAAM,aAAa,CAAC,CAAC;oBAEnD,uBAAuB;oBACvB,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,QAAgB;wBAChD,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,QAAQ,GAAG,GAAG,GAAG,CAAC;oBAC7D,CAAC,CAAC,CAAC;oBAEH,IAAI,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;oBACzC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBAElB,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;oBAE1B,yEAAyE;oBACzE,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;gBAC9B,CAAC;YACL,CAAC,CAAC;YAEF,GAAG,CAAC,IAAI,EAAE,CAAC;QACf,CAAC;QAEO,SAAI,GAAG,KAAK;YAChB,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YACzB,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACxB,CAAC;QAEO,WAAM,GAAG,KAAK;YAClB,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YAC3B,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACzB,CAAC;QAUO,mBAAc,GAAG,KAAK;YAC1B,MAAM,IAAI,GAAG,KAAK,CAAC;YAEnB,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YACzB,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAE7C,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC,CAAC;QACvC,CAAC;QAEO,SAAI,GAAG,KAAK;YAChB,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YAC/B,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAE7C,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC,CAAC;QACvC,CAAC;QAzLG,IAAI,CAAC,QAAQ,GAAG,IAAI,kCAAgB,CAAC,kBAAkB,EAAE,mBAAmB,CAAC,CAAC;QAE9E,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAsB,CAAC;QAC3E,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAsB,CAAC;QAC7E,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAsB,CAAC;QAChF,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAsB,CAAC;QACpF,IAAI,CAAC,oBAAoB,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAsB,CAAC;QACtF,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,cAAc,CAAC,kBAAkB,CAAsB,CAAC;QACnF,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAsB,CAAC;QACvE,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAsB,CAAC;QAE3E,IAAI,CAAC,yBAAyB,GAAG,QAAQ,CAAC,cAAc,CAAC,oBAAoB,CAAmB,CAAC;QACjG,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC,cAAc,CAAC,gBAAgB,CAAmB,CAAC;QAEpF,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;QACxC,IAAI,CAAC,aAAa,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC1C,IAAI,CAAC,oBAAoB,CAAC,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;QACxD,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;QACpC,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;QACpC,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;QAExC,IAAI,CAAC,cAAc,CAAC,OAAO,GAAG,KAAK;YAC/B,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;YACzC,IAAI,CAAC,gBAAgB,CAAC,SAAS,GAAG,kCAAkC,CAAC;YACrE,MAAM,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QACnC,CAAC,CAAC;QAEF,IAAI,CAAC,gBAAgB,CAAC,OAAO,GAAG,KAAK;YACjC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;YACzC,IAAI,CAAC,gBAAgB,CAAC,SAAS,GAAG,mCAAmC,CAAC;YACtE,MAAM,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QACrC,CAAC,CAAC;QAEF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IA+HO,GAAG,CAAC,CAAS;QACjB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;IACnC,CAAC;IAEO,QAAQ;QACZ,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IAoBD;;OAEG;IACK,KAAK,CAAC,oBAAoB;QAC9B,MAAM,KAAK,GAAkB;YACzB,SAAS,EAAE,EAAE;SAChB,CAAC;QAEF,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC1B,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAC/D,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;CACJ;AAED,MAAM,CAAC,MAAM,GAAG;IACZ,MAAM,MAAM,GAAG,IAAI,gBAAU,CAAC,QAAQ,CAAC,CAAC;IACxC,MAAM,IAAI,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC;AACrC,CAAC,CAAC;;;;;;;;ACjQF;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,OAAO,yBAAyB,MAAM;AAC/D;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,kBAAkB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,qBAAqB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,kBAAkB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;AC7HA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;ACpCA;AACA,8CAA8C,cAAcaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oCAAoC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;AC9LA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,GAAG,MAAM,OAAO;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,GAAG,MAAM,OAAO;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;AC7FA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,sDAAsD;AACtD,uCAAuC,mBAAmB;AAC1D,oCAAoC,WAAW,YAAY,aAAa;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;ACpHA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA,yCAAyC,eAAe,YAAY,EAAE,cAAc,oBAAoB;AACxG;AACA;AACA;AACA;AACA,8CAA8C,UAAU,cAAc,SAAS;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,YAAY,cAAc,WAAW;AACrF;AACA;AACA;AACA,gDAAgD,YAAY,cAAc,WAAW;AACrF;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;ACzGA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;ACtCA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qBAAqB,WAAW,0BAA0B;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA,6DAA6D,MAAM;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;AC3EA;AACA;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA;AACA,aAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,gBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,sBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kCAAkC,SAAS;AAC3C,kCAAkC,WAAW,UAAU;AACvD,yCAAyC,cAAc;AACvD;AACA,6GAA6G,OAAO,UAAU;AAC9H,gFAAgF,iBAAiB,OAAO;AACxG,wDAAwD,gBAAgB,QAAQ,OAAO;AACvF,8CAA8C,g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","file":"dap.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4477518385c72172f758","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.readUInt32LE = (b, idx) => {\r\n    return (b[idx] |\r\n        (b[idx + 1] << 8) |\r\n        (b[idx + 2] << 16) |\r\n        (b[idx + 3] << 24)) >>> 0;\r\n};\r\nexports.bufferConcat = (bufs) => {\r\n    let len = 0;\r\n    for (const b of bufs) {\r\n        len += b.length;\r\n    }\r\n    const r = new Uint8Array(len);\r\n    len = 0;\r\n    for (const b of bufs) {\r\n        r.set(b, len);\r\n        len += b.length;\r\n    }\r\n    return r;\r\n};\r\nexports.delay = async (t) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, t);\r\n    });\r\n};\r\nexports.addInt32 = (arr, val) => {\r\n    if (!arr) {\r\n        arr = [];\r\n    }\r\n    arr.push(val & 0xff, (val >> 8) & 0xff, (val >> 16) & 0xff, (val >> 24) & 0xff);\r\n    return arr;\r\n};\r\nexports.hex = (v) => {\r\n    return \"0x\" + v.toString(16);\r\n};\r\nexports.rid = (v) => {\r\n    const m = [\r\n        \"DP_0x0\",\r\n        \"DP_0x4\",\r\n        \"DP_0x8\",\r\n        \"DP_0xC\",\r\n        \"AP_0x0\",\r\n        \"AP_0x4\",\r\n        \"AP_0x8\",\r\n        \"AP_0xC\",\r\n    ];\r\n    return m[v] || \"?\";\r\n};\r\nexports.bank = (addr) => {\r\n    const APBANKSEL = 0x000000f0;\r\n    return (addr & APBANKSEL) | (addr & 0xff000000);\r\n};\r\nexports.apReg = (r, mode) => {\r\n    const v = r | mode | 1 /* AP_ACC */;\r\n    return (4 + ((v & 0x0c) >> 2));\r\n};\r\nexports.bufToUint32Array = (buf) => {\r\n    exports.assert((buf.length & 3) === 0);\r\n    const r = [];\r\n    if (!buf.length) {\r\n        return r;\r\n    }\r\n    r[buf.length / 4 - 1] = 0;\r\n    for (let i = 0; i < r.length; ++i) {\r\n        r[i] = exports.readUInt32LE(buf, i << 2);\r\n    }\r\n    return r;\r\n};\r\nexports.assert = (cond) => {\r\n    if (!cond) {\r\n        throw new Error(\"assertion failed\");\r\n    }\r\n};\r\nexports.regRequest = (regId, isWrite = false) => {\r\n    let request = !isWrite ? 2 /* READ */ : 0 /* WRITE */;\r\n    if (regId < 4) {\r\n        request |= 0 /* DP_ACC */;\r\n    }\r\n    else {\r\n        request |= 1 /* AP_ACC */;\r\n    }\r\n    request |= (regId & 3) << 2;\r\n    return request;\r\n};\r\nexports.hexBytes = (bytes) => {\r\n    let chk = 0;\r\n    let r = \":\";\r\n    bytes.forEach((b) => chk += b);\r\n    bytes.push((-chk) & 0xff);\r\n    bytes.forEach((b) => r += (\"0\" + b.toString(16)).slice(-2));\r\n    return r.toUpperCase();\r\n};\r\nexports.hex2bin = (hexstr) => {\r\n    const array = new Uint8Array(hexstr.length / 2);\r\n    for (let i = 0; i < hexstr.length / 2; i++) {\r\n        array[i] = parseInt(hexstr.substr(2 * i, 2), 16);\r\n    }\r\n    return array;\r\n};\r\n//# sourceMappingURL=util.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../dapjs/built/util.js\n// module id = 0\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cortex_m_1 = require(\"./core/cortex_m\");\r\nexports.CortexM = cortex_m_1.CortexM;\r\nexports.CoreNames = cortex_m_1.CoreNames;\r\nexports.ISANames = cortex_m_1.ISANames;\r\nvar dap_1 = require(\"./dap\");\r\nexports.DAP = dap_1.DAP;\r\nvar FlashTarget_1 = require(\"./targets/FlashTarget\");\r\nexports.FlashTargets = FlashTarget_1.FlashTargets;\r\nexports.FlashTarget = FlashTarget_1.FlashTarget;\r\nvar FlashProgram_1 = require(\"./targets/FlashProgram\");\r\nexports.FlashProgram = FlashProgram_1.FlashProgram;\r\n//# sourceMappingURL=main.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../dapjs/built/main.js\n// module id = 1\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst debug_1 = require(\"../debug/debug\");\r\nconst util_1 = require(\"../util\");\r\nconst memory_1 = require(\"./memory\");\r\nconst DEFAULT_RUNCODE_TIMEOUT = 10000 /* ms */;\r\nexports.CPUID_IMPLEMENTER_MASK = 0xff000000;\r\nexports.CPUID_IMPLEMENTER_POS = 24;\r\nexports.CPUID_VARIANT_MASK = 0x00f00000;\r\nexports.CPUID_VARIANT_POS = 20;\r\nexports.CPUID_ARCHITECTURE_MASK = 0x000f0000;\r\nexports.CPUID_ARCHITECTURE_POS = 16;\r\nexports.CPUID_PARTNO_MASK = 0x0000fff0;\r\nexports.CPUID_PARTNO_POS = 4;\r\nexports.CPUID_REVISION_MASK = 0x0000000f;\r\nexports.CPUID_REVISION_POS = 0;\r\nexports.ISANames = new Map();\r\nexports.ISANames.set(12 /* ARMv6M */, \"ARMv6M\");\r\nexports.ISANames.set(15 /* ARMv7M */, \"ARMv7M\");\r\nexports.CoreNames = new Map();\r\nexports.CoreNames.set(3104 /* CortexM0 */, \"Cortex-M0\");\r\nexports.CoreNames.set(3105 /* CortexM1 */, \"Cortex-M1\");\r\nexports.CoreNames.set(3107 /* CortexM3 */, \"Cortex-M3\");\r\nexports.CoreNames.set(3108 /* CortexM4 */, \"Cortex-M4\");\r\nexports.CoreNames.set(3168 /* CortexM0p */, \"Cortex-M0+\");\r\nclass PreparedCortexMCommand {\r\n    constructor(dap) {\r\n        this.cmd = new memory_1.PreparedMemoryCommand(dap);\r\n    }\r\n    writeCoreRegister(no, val) {\r\n        this.cmd.write32(3758157304 /* DCRDR */, val);\r\n        this.cmd.write32(3758157300 /* DCRSR */, no | 65536 /* DCRSR_REGWnR */);\r\n    }\r\n    halt() {\r\n        this.cmd.write32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ | 1 /* C_DEBUGEN */ | 2 /* C_HALT */);\r\n    }\r\n    resume() {\r\n        this.cmd.write32(3758157104 /* DFSR */, 4 /* DFSR_DWTTRAP */ | 2 /* DFSR_BKPT */ | 1 /* DFSR_HALTED */);\r\n    }\r\n    async go() {\r\n        // this.cmd.read32(CortexSpecialReg.DHCSR);\r\n        const v = await this.cmd.go();\r\n        // assert(v & CortexSpecialReg.S_REGRDY);\r\n    }\r\n}\r\nexports.PreparedCortexMCommand = PreparedCortexMCommand;\r\n/**\r\n * Abstraction of an ARM Cortex M CPU from a programmer's perspective. Provides functionality\r\n * for setting breakpoints, reading general-purpose registers, reading from memory and stopping\r\n * and starting the CPU.\r\n */\r\nclass CortexM {\r\n    constructor(device) {\r\n        this.dev = device;\r\n        this.memory = new memory_1.Memory(device);\r\n        this.debug = new debug_1.Debug(this);\r\n    }\r\n    /**\r\n     * Initialise the debug access port on the device, and read the device type.\r\n     */\r\n    async init() {\r\n        await this.dev.init();\r\n        // FIXME: don't run this if security is enabled on the K64F\r\n        await this.debug.setupFpb();\r\n        await this.readCoreType();\r\n    }\r\n    /**\r\n     * Read the current state of the CPU.\r\n     *\r\n     * @returns A member of the `CoreState` enum corresponding to the current status of the CPU.\r\n     */\r\n    async getState() {\r\n        const dhcsr = await this.memory.read32(3758157296 /* DHCSR */);\r\n        if (dhcsr & 33554432 /* S_RESET_ST */) {\r\n            const newDHCSR = await this.memory.read32(3758157296 /* DHCSR */);\r\n            if (newDHCSR & 33554432 /* S_RESET_ST */ && !(newDHCSR & 16777216 /* S_RETIRE_ST */)) {\r\n                return 0 /* TARGET_RESET */;\r\n            }\r\n        }\r\n        if (dhcsr & 524288 /* S_LOCKUP */) {\r\n            return 1 /* TARGET_LOCKUP */;\r\n        }\r\n        else if (dhcsr & 262144 /* S_SLEEP */) {\r\n            return 2 /* TARGET_SLEEPING */;\r\n        }\r\n        else if (dhcsr & 131072 /* S_HALT */) {\r\n            return 3 /* TARGET_HALTED */;\r\n        }\r\n        else {\r\n            return 4 /* TARGET_RUNNING */;\r\n        }\r\n    }\r\n    /**\r\n     * Read the CPUID register from the CPU, and interpret its meaning in terms of implementer,\r\n     * architecture and core type.\r\n     */\r\n    async readCoreType() {\r\n        const cpuid = await this.memory.read32(3758157056 /* CPUID */);\r\n        const implementer = ((cpuid & exports.CPUID_IMPLEMENTER_MASK) >> exports.CPUID_IMPLEMENTER_POS);\r\n        const arch = ((cpuid & exports.CPUID_ARCHITECTURE_MASK) >> exports.CPUID_ARCHITECTURE_POS);\r\n        const coreType = ((cpuid & exports.CPUID_PARTNO_MASK) >> exports.CPUID_PARTNO_POS);\r\n        console.debug(`Found an ARM ${exports.CoreNames.get(coreType)}`);\r\n        return [implementer, arch, coreType];\r\n    }\r\n    /**\r\n     * Read a core register from the CPU (e.g. r0...r15, pc, sp, lr, s0...)\r\n     *\r\n     * @param no Member of the `CortexReg` enum - an ARM Cortex CPU general-purpose register.\r\n     */\r\n    async readCoreRegister(no) {\r\n        await this.memory.write32(3758157300 /* DCRSR */, no);\r\n        const v = await this.memory.read32(3758157296 /* DHCSR */);\r\n        util_1.assert(v & 65536 /* S_REGRDY */);\r\n        return await this.memory.read32(3758157304 /* DCRDR */);\r\n    }\r\n    /**\r\n     * Write a 32-bit word to the specified CPU general-purpose register.\r\n     *\r\n     * @param no Member of the `CortexReg` enum - an ARM Cortex CPU general-purpose register.\r\n     * @param val Value to be written.\r\n     */\r\n    async writeCoreRegister(no, val) {\r\n        const prep = new memory_1.PreparedMemoryCommand(this.dev);\r\n        prep.write32(3758157304 /* DCRDR */, val);\r\n        prep.write32(3758157300 /* DCRSR */, no | 65536 /* DCRSR_REGWnR */);\r\n        prep.read32(3758157296 /* DHCSR */);\r\n        const v = (await prep.go())[0];\r\n        util_1.assert(v & 65536 /* S_REGRDY */);\r\n    }\r\n    /**\r\n     * Halt the CPU core.\r\n     */\r\n    async halt() {\r\n        return this.memory.write32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ | 1 /* C_DEBUGEN */ | 2 /* C_HALT */);\r\n    }\r\n    /**\r\n     * Resume the CPU core.\r\n     */\r\n    async resume() {\r\n        if (await this.isHalted()) {\r\n            await this.memory.write32(3758157104 /* DFSR */, 4 /* DFSR_DWTTRAP */ | 2 /* DFSR_BKPT */ | 1 /* DFSR_HALTED */);\r\n            await this.debug.enable();\r\n        }\r\n    }\r\n    /**\r\n     * Find out whether the CPU is halted.\r\n     */\r\n    async isHalted() {\r\n        const s = await this.status();\r\n        return s.isHalted;\r\n    }\r\n    /**\r\n     * Read the current status of the CPU.\r\n     *\r\n     * @returns Object containing the contents of the `DHCSR` register, the `DFSR` register, and a boolean value\r\n     * stating the current halted state of the CPU.\r\n     */\r\n    async status() {\r\n        const prep = new memory_1.PreparedMemoryCommand(this.dev);\r\n        prep.read32(3758157296 /* DHCSR */);\r\n        prep.read32(3758157104 /* DFSR */);\r\n        const results = await prep.go();\r\n        const dhcsr = results[0];\r\n        const dfsr = results[1];\r\n        return {\r\n            dfsr,\r\n            dhscr: dhcsr,\r\n            isHalted: !!(dhcsr & 131072 /* S_HALT */),\r\n        };\r\n    }\r\n    /**\r\n     * Reset the CPU core. This currently does a software reset - it is also technically possible to perform a 'hard'\r\n     * reset using the reset pin from the debugger.\r\n     */\r\n    async reset(halt = false) {\r\n        if (halt) {\r\n            await this.halt();\r\n            // VC_CORERESET causes the core to halt on reset.\r\n            const demcr = await this.memory.read32(3758157308 /* DEMCR */);\r\n            await this.memory.write32(3758157308 /* DEMCR */, demcr | 1 /* DEMCR_VC_CORERESET */);\r\n            await this.softwareReset();\r\n            await this.waitForHalt();\r\n            // Unset the VC_CORERESET bit\r\n            await this.memory.write32(3758157308 /* DEMCR */, demcr);\r\n        }\r\n        else {\r\n            await this.softwareReset();\r\n        }\r\n    }\r\n    /**\r\n     * Run specified machine code natively on the device. Assumes usual C calling conventions\r\n     * - returns the value of r0 once the program has terminated. The program _must_ terminate\r\n     * in order for this function to return. This can be achieved by placing a `bkpt`\r\n     * instruction at the end of the function.\r\n     *\r\n     * @param code array containing the machine code (32-bit words).\r\n     * @param address memory address at which to place the code.\r\n     * @param pc initial value of the program counter.\r\n     * @param lr initial value of the link register.\r\n     * @param sp initial value of the stack pointer.\r\n     * @param upload should we upload the code before running it.\r\n     * @param args set registers r0...rn before running code\r\n     *\r\n     * @returns A promise for the value of r0 on completion of the function call.\r\n     */\r\n    async runCode(code, address, pc, lr, sp, upload, ...args) {\r\n        // await this.halt();\r\n        const cmd = new PreparedCortexMCommand(this.dev);\r\n        cmd.halt();\r\n        // Point the program counter to the start of the program\r\n        cmd.writeCoreRegister(15 /* PC */, pc);\r\n        cmd.writeCoreRegister(14 /* LR */, lr);\r\n        cmd.writeCoreRegister(13 /* SP */, sp);\r\n        for (let i = 0; i < args.length; i++) {\r\n            cmd.writeCoreRegister(i, args[i]);\r\n        }\r\n        await cmd.go();\r\n        // Write the program to memory at the specified address\r\n        if (upload) {\r\n            await this.memory.writeBlock(address, code);\r\n        }\r\n        // Run the program and wait for halt\r\n        await this.resume();\r\n        await this.waitForHalt(DEFAULT_RUNCODE_TIMEOUT); // timeout after 10s\r\n        return await this.readCoreRegister(0 /* R0 */);\r\n    }\r\n    /**\r\n     * Spin until the chip has halted.\r\n     */\r\n    async waitForHalt(timeout = 0) {\r\n        return new Promise(async (resolve, reject) => {\r\n            let running = true;\r\n            if (timeout > 0) {\r\n                setTimeout(() => {\r\n                    reject(\"waitForHalt timed out.\");\r\n                    running = false;\r\n                }, timeout);\r\n            }\r\n            while (running && !(await this.isHalted())) {\r\n                /* empty */\r\n            }\r\n            if (running) {\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n    async softwareReset() {\r\n        await this.memory.write32(3758157068 /* NVIC_AIRCR */, 100270080 /* NVIC_AIRCR_VECTKEY */ | 4 /* NVIC_AIRCR_SYSRESETREQ */);\r\n        // wait for the system to come out of reset\r\n        let dhcsr = await this.memory.read32(3758157296 /* DHCSR */);\r\n        while ((dhcsr & 33554432 /* S_RESET_ST */) !== 0) {\r\n            dhcsr = await this.memory.read32(3758157296 /* DHCSR */);\r\n        }\r\n    }\r\n}\r\nexports.CortexM = CortexM;\r\n//# sourceMappingURL=cortex_m.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../dapjs/built/core/cortex_m.js\n// module id = 2\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst cmsis_dap_1 = require(\"./transport/cmsis_dap\");\r\nconst util_1 = require(\"./util\");\r\nclass PreparedDapCommand {\r\n    constructor(device) {\r\n        this.device = device;\r\n        this.commands = [[0, 1]];\r\n        this.commandCounts = [0];\r\n        this.currentCommand = 0;\r\n        this.readCounts = [0];\r\n    }\r\n    writeReg(regId, value) {\r\n        const request = util_1.regRequest(regId, true);\r\n        if (this.commands[this.currentCommand].length + 5 > 64) {\r\n            // start a new command\r\n            this.commands.push([0, 1]);\r\n            this.commandCounts.push(0);\r\n            this.readCounts.push(0);\r\n            this.currentCommand++;\r\n        }\r\n        this.commands[this.currentCommand].push(request);\r\n        util_1.addInt32(this.commands[this.currentCommand], value);\r\n        this.commandCounts[this.currentCommand]++;\r\n    }\r\n    readReg(regId) {\r\n        const request = util_1.regRequest(regId, false);\r\n        if (this.commands[this.currentCommand].length + 1 > 64) {\r\n            // start a new command\r\n            this.commands.push([0, 1]);\r\n            this.commandCounts.push(0);\r\n            this.readCounts.push(0);\r\n            this.currentCommand++;\r\n        }\r\n        this.commands[this.currentCommand].push(request);\r\n        this.commandCounts[this.currentCommand]++;\r\n        this.readCounts[this.currentCommand]++;\r\n    }\r\n    writeRegRepeat(regId, data) {\r\n        // fill up the rest of the command we have left\r\n        data.forEach((cmd) => {\r\n            this.writeReg(regId, cmd);\r\n        });\r\n    }\r\n    async go() {\r\n        const v = [];\r\n        for (let i = 0; i < this.commands.length; i++) {\r\n            const command = this.commands[i];\r\n            command[1] = this.commandCounts[i];\r\n            const result = await this.device.dap.cmdNums(5 /* DAP_TRANSFER */, command);\r\n            for (let j = 0; j < this.readCounts[i]; j++) {\r\n                v.push(util_1.readUInt32LE(result, 3 + 4 * j));\r\n            }\r\n        }\r\n        return v;\r\n    }\r\n    writeDp(addr, data) {\r\n        if (addr === 2 /* SELECT */) {\r\n            if (data === this.dpSelect) {\r\n                return Promise.resolve();\r\n            }\r\n            this.dpSelect = data;\r\n        }\r\n        return this.writeReg(addr, data);\r\n    }\r\n    writeAp(addr, data) {\r\n        this.writeDp(2 /* SELECT */, util_1.bank(addr));\r\n        if (addr === 0 /* CSW */) {\r\n            if (data === this.csw) {\r\n                return Promise.resolve();\r\n            }\r\n            this.csw = data;\r\n        }\r\n        this.writeReg(util_1.apReg(addr, 0 /* WRITE */), data);\r\n    }\r\n    readDp(addr) {\r\n        return this.readReg(addr);\r\n    }\r\n    readAp(addr) {\r\n        this.writeDp(2 /* SELECT */, util_1.bank(addr));\r\n        return this.readReg(util_1.apReg(addr, 2 /* READ */));\r\n    }\r\n}\r\nexports.PreparedDapCommand = PreparedDapCommand;\r\nclass DAP {\r\n    constructor(device) {\r\n        this.device = device;\r\n        this.dap = new cmsis_dap_1.CMSISDAP(device);\r\n    }\r\n    async reconnect() {\r\n        await this.dap.disconnect();\r\n        await util_1.delay(100);\r\n        await this.init();\r\n    }\r\n    async init() {\r\n        await this.dap.connect();\r\n        const n = await this.readDp(0 /* IDCODE */);\r\n        this.idcode = n;\r\n        let prep = new PreparedDapCommand(this);\r\n        prep.writeReg(0 /* DP_0x0 */, 1 << 2); // clear sticky error\r\n        prep.writeDp(2 /* SELECT */, 0);\r\n        prep.writeDp(1 /* CTRL_STAT */, 1073741824 /* CSYSPWRUPREQ */ | 268435456 /* CDBGPWRUPREQ */);\r\n        const m = 536870912 /* CDBGPWRUPACK */ | 2147483648 /* CSYSPWRUPACK */;\r\n        prep.readDp(1 /* CTRL_STAT */);\r\n        let v = (await prep.go())[0];\r\n        while ((v & m) !== m) {\r\n            v = await this.readDp(1 /* CTRL_STAT */);\r\n        }\r\n        prep = new PreparedDapCommand(this);\r\n        prep.writeDp(1 /* CTRL_STAT */, (1073741824 /* CSYSPWRUPREQ */ |\r\n            268435456 /* CDBGPWRUPREQ */ |\r\n            0 /* TRNNORMAL */ |\r\n            3840 /* MASKLANE */));\r\n        prep.writeDp(2 /* SELECT */, 0);\r\n        prep.readAp(252 /* IDR */);\r\n        await prep.go();\r\n    }\r\n    async writeReg(regId, val) {\r\n        return this.regOp(regId, val);\r\n    }\r\n    async readReg(regId) {\r\n        const buf = await this.regOp(regId, null);\r\n        const v = util_1.readUInt32LE(buf, 3);\r\n        return v;\r\n    }\r\n    async readDp(addr) {\r\n        return this.readReg(addr);\r\n    }\r\n    async readAp(addr) {\r\n        const prep = new PreparedDapCommand(this);\r\n        prep.writeDp(2 /* SELECT */, util_1.bank(addr));\r\n        prep.readReg(util_1.apReg(addr, 2 /* READ */));\r\n        return (await prep.go())[0];\r\n    }\r\n    writeDp(addr, data) {\r\n        if (addr === 2 /* SELECT */) {\r\n            if (data === this.dpSelect) {\r\n                return Promise.resolve();\r\n            }\r\n            this.dpSelect = data;\r\n        }\r\n        return this.writeReg(addr, data);\r\n    }\r\n    async writeAp(addr, data) {\r\n        if (addr === 0 /* CSW */) {\r\n            if (data === this.csw) {\r\n                return Promise.resolve();\r\n            }\r\n            this.csw = data;\r\n        }\r\n        const prep = new PreparedDapCommand(this);\r\n        prep.writeDp(2 /* SELECT */, util_1.bank(addr));\r\n        prep.writeReg(util_1.apReg(addr, 0 /* WRITE */), data);\r\n        await prep.go();\r\n    }\r\n    async close() {\r\n        return this.device.close();\r\n    }\r\n    async readRegRepeat(regId, cnt) {\r\n        util_1.assert(cnt <= 15);\r\n        const request = util_1.regRequest(regId);\r\n        const sendargs = [0, cnt];\r\n        for (let i = 0; i < cnt; ++i) {\r\n            sendargs.push(request);\r\n        }\r\n        const buf = await this.dap.cmdNums(5 /* DAP_TRANSFER */, sendargs);\r\n        if (buf[1] !== cnt) {\r\n            throw new Error((\"(many) Bad #trans \" + buf[1]));\r\n        }\r\n        else if (buf[2] !== 1) {\r\n            throw new Error((\"(many) Bad transfer status \" + buf[2]));\r\n        }\r\n        return buf.subarray(3, 3 + cnt * 4);\r\n    }\r\n    async writeRegRepeat(regId, data) {\r\n        const remainingLength = 64 - 1 - 1 - 2 - 1; // 14\r\n        util_1.assert(data.length <= remainingLength / 4);\r\n        /*\r\n            BYTE | BYTE *****| SHORT**********| BYTE *************| WORD *********|\r\n          > 0x06 | DAP Index | Transfer Count | Transfer Request  | Transfer Data |\r\n                 |***********|****************|*******************|+++++++++++++++|\r\n        */\r\n        const request = util_1.regRequest(regId, true);\r\n        const sendargs = [0, data.length, 0, request];\r\n        data.forEach((d) => {\r\n            // separate d into bytes\r\n            util_1.addInt32(sendargs, d);\r\n        });\r\n        const buf = await this.dap.cmdNums(6 /* DAP_TRANSFER_BLOCK */, sendargs);\r\n        if (buf[3] !== 1) {\r\n            throw new Error((\"(many-wr) Bad transfer status \" + buf[2]));\r\n        }\r\n    }\r\n    async regOp(regId, val) {\r\n        const request = util_1.regRequest(regId, val !== null);\r\n        const sendargs = [0, 1, request];\r\n        if (val !== null) {\r\n            util_1.addInt32(sendargs, val);\r\n        }\r\n        const buf = await this.dap.cmdNums(5 /* DAP_TRANSFER */, sendargs);\r\n        if (buf[1] !== 1) {\r\n            console.error(\"Make sure you have initialised the DAP connection.\");\r\n            throw new Error((\"Bad #trans \" + buf[1]));\r\n        }\r\n        else if (buf[2] !== 1) {\r\n            if (buf[2] === 2) {\r\n                throw new Error((\"Transfer wait\"));\r\n            }\r\n            throw new Error((\"Bad transfer status \" + buf[2]));\r\n        }\r\n        return buf;\r\n    }\r\n}\r\nexports.DAP = DAP;\r\n//# sourceMappingURL=dap.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../dapjs/built/dap.js\n// module id = 3\n// module chunks = 0","import {CoreNames, CortexM, CortexReg, DAP, ISANames} from \"dapjs\";\nimport {FlashTarget, FlashTargets, FlashProgram} from \"dapjs\";\nimport HID from \"webhid\";\n\nimport {PlatformSelector} from \"./device_selector\";\nimport HTMLLogger from \"./logger\";\n\ninterface IMachineState {\n    registers: number[];\n}\n\nconst arrToString = (arr: number[]) => {\n    let r = \"\";\n    for (let i = 0; i < arr.length; ++i) {\n        r += (\"0000\" + i).slice(-4) + \": \" + (\"00000000\" + (arr[i] >>> 0).toString(16)).slice(-8);\n\n        if (i !== arr.length - 1) {\n            r += \"\\n\";\n        }\n    }\n    return r;\n};\n\nconst machineStateToString = (s: IMachineState) => {\n    return \"REGS:\\n\" + arrToString(s.registers);\n};\n\nclass DAPDemo {\n    public target: FlashTarget;\n\n    private readonly selector: PlatformSelector;\n    private device: USBDevice;\n    private hid: HID;\n    private dapDevice: DAP;\n    private deviceCode: string;\n\n    private readonly chooseButton: HTMLButtonElement;\n    private readonly connectButton: HTMLButtonElement;\n    private readonly flashRedButton: HTMLButtonElement;\n    private readonly flashGreenButton: HTMLButtonElement;\n    private readonly printRegistersButton: HTMLButtonElement;\n    private readonly stepButton: HTMLButtonElement;\n    private readonly haltButton: HTMLButtonElement;\n    private readonly resumeButton: HTMLButtonElement;\n\n    private readonly flashProgressBarContainer: HTMLDivElement;\n    private readonly flashProgressBar: HTMLDivElement;\n\n    private readonly logger: HTMLLogger;\n\n    constructor(logger: HTMLLogger) {\n        this.selector = new PlatformSelector(\"platform-chooser\", \"platform-detected\");\n\n        this.chooseButton = document.getElementById(\"choose\") as HTMLButtonElement;\n        this.connectButton = document.getElementById(\"connect\") as HTMLButtonElement;\n        this.flashRedButton = document.getElementById(\"flash-red\") as HTMLButtonElement;\n        this.flashGreenButton = document.getElementById(\"flash-green\") as HTMLButtonElement;\n        this.printRegistersButton = document.getElementById(\"registers\") as HTMLButtonElement;\n        this.stepButton = document.getElementById(\"step-instruction\") as HTMLButtonElement;\n        this.haltButton = document.getElementById(\"halt\") as HTMLButtonElement;\n        this.resumeButton = document.getElementById(\"resume\") as HTMLButtonElement;\n\n        this.flashProgressBarContainer = document.getElementById(\"progress-container\") as HTMLDivElement;\n        this.flashProgressBar = document.getElementById(\"flash-progress\") as HTMLDivElement;\n\n        this.chooseButton.onclick = this.choose;\n        this.connectButton.onclick = this.connect;\n        this.printRegistersButton.onclick = this.printRegisters;\n        this.stepButton.onclick = this.step;\n        this.haltButton.onclick = this.halt;\n        this.resumeButton.onclick = this.resume;\n\n        this.flashRedButton.onclick = async () => {\n            this.flashProgressBar.style.width = \"0%\";\n            this.flashProgressBar.className = \"progress-bar progress-bar-danger\";\n            await this.flash(\"blinky-red\");\n        };\n\n        this.flashGreenButton.onclick = async () => {\n            this.flashProgressBar.style.width = \"0%\";\n            this.flashProgressBar.className = \"progress-bar progress-bar-success\";\n            await this.flash(\"blinky-green\");\n        };\n\n        this.logger = logger;\n    }\n\n    /**\n     * Define `choose` as ES6 arrow function so that `this` is bound to the instance of DAPDemo, rather than bound to\n     * the source of the click event.\n     */\n    private choose = async () => {\n        this.device = await navigator.usb.requestDevice({ filters: [{vendorId: 0x0d28}]});\n        this.deviceCode = this.device.serialNumber.slice(0, 4);\n\n        const info = await this.selector.lookupDevice(this.deviceCode);\n\n        this.selector.show(info);\n        this.selector.enable();\n\n        this.chooseButton.disabled = true;\n        this.connectButton.disabled = false;\n    }\n\n    /**\n     * Define `connect` as ES6 arrow function so that `this` is bound to the instance of DAPDemo, rather than bound to\n     * the source of the click event.\n     */\n    private connect = async () => {\n        this.hid = new HID(this.device);\n\n        this.log(\"Opening device.\");\n\n        // open hid device\n        await this.hid.open();\n\n        this.log(\"Device opened.\");\n\n        this.dapDevice = new DAP(this.hid);\n        this.target = new FlashTarget(this.dapDevice, FlashTargets.get(this.deviceCode));\n\n        this.log(\"Initialising device.\");\n\n        await this.target.init();\n\n        this.log(\"Halting target.\");\n\n        await this.target.halt();\n\n        this.log(\"Target halted.\");\n\n        const [imp, isa, type] = await this.target.readCoreType();\n        this.log(`Connected to an ARM ${CoreNames.get(type)} (${ISANames.get(isa)})`);\n\n        this.selector.disable();\n        this.connectButton.disabled = true;\n\n        const elements = Array.from(document.querySelectorAll(\".when-connected\"));\n\n        for (const elem of elements) {\n            (elem as HTMLButtonElement).disabled = false;\n        }\n    }\n\n    private flash = async (f: string) => {\n        // Erase flash\n        await this.target.halt();\n\n        this.flashProgressBarContainer.style.display = \"block\";\n\n        console.log(f);\n\n        const xhr = new XMLHttpRequest();\n        if (this.deviceCode === \"9900\") {\n            f += \".hex\";\n            xhr.responseType = \"text\";\n        } else {\n            f += \".bin\";\n            xhr.responseType = \"arraybuffer\";\n        }\n        xhr.open(\"GET\", f, true);\n\n        xhr.onload = async (e: any) => {\n            if (this.deviceCode === \"9900\") {\n                console.log(\"Flashing a micro:bit hex\");\n\n                const program = FlashProgram.fromIntelHex(xhr.responseText);\n                await this.target.program(program, (progress: number) => {\n                    // console.log(progress);\n                    this.flashProgressBar.style.width = `${progress * 100}%`;\n                });\n\n                this.log(`Successfully flashed binary.`);\n                this.log(\"Done.\");\n\n                await this.target.reset();\n            } else {\n                console.log(\"Flashing a K64F binary\");\n\n                const array = new Uint32Array(xhr.response);\n                const program = FlashProgram.fromBinary(0, array);\n\n                this.log(`Binary file ${array.length} words long`);\n\n                // Push binary to board\n                await this.target.program(program, (progress: number) => {\n                    this.flashProgressBar.style.width = `${progress * 100}%`;\n                });\n\n                this.log(`Successfully flashed binary.`);\n                this.log(\"Done.\");\n\n                await this.target.reset();\n\n                // make sure we don't have any issues flashing twice in the same session.\n                this.target.flashUnInit();\n            }\n        };\n\n        xhr.send();\n    }\n\n    private halt = async () => {\n        await this.target.halt();\n        this.log(\"Halted.\");\n    }\n\n    private resume = async () => {\n        await this.target.resume();\n        this.log(\"Resumed.\");\n    }\n\n    private log(s: string) {\n        this.logger.log(\"[demo] \" + s);\n    }\n\n    private clearLog() {\n        this.logger.clear();\n    }\n\n    private printRegisters = async () => {\n        const halt = false;\n\n        await this.target.halt();\n        const st = await this.snapshotMachineState();\n\n        this.clearLog();\n        this.log(machineStateToString(st));\n    }\n\n    private step = async () => {\n        await this.target.debug.step();\n        const st = await this.snapshotMachineState();\n\n        this.clearLog();\n        this.log(machineStateToString(st));\n    }\n\n    /**\n     * Snapshot the current state of the CPU. Reads all general-purpose registers, and returns them in an array.\n     */\n    private async snapshotMachineState() {\n        const state: IMachineState = {\n            registers: [],\n        };\n\n        for (let i = 0; i < 16; i++) {\n            state.registers[i] = await this.target.readCoreRegister(i);\n        }\n\n        return state;\n    }\n}\n\nwindow.onload = () => {\n    const logger = new HTMLLogger(\"#trace\");\n    const demo = new DAPDemo(logger);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst breakpoint_1 = require(\"./breakpoint\");\r\nclass Debug {\r\n    constructor(core) {\r\n        this.core = core;\r\n        this.enabled = false;\r\n        this.availableHWBreakpoints = [];\r\n        this.breakpoints = new Map();\r\n    }\r\n    /**\r\n     * Set up (and disable) the Flash Patch & Breakpoint unit. It will be enabled when\r\n     * the first breakpoint is set.\r\n     *\r\n     * Also reads the number of available hardware breakpoints.\r\n     */\r\n    async setupFpb() {\r\n        // setup FPB (breakpoint)\r\n        const fpcr = await this.core.memory.read32(3758104576 /* FP_CTRL */);\r\n        const nbCode = ((fpcr >> 8) & 0x70) | ((fpcr >> 4) & 0xf);\r\n        const nbLit = (fpcr >> 7) & 0xf;\r\n        this.totalHWBreakpoints = nbCode;\r\n        console.debug(`${nbCode} hardware breakpoints, ${nbLit} literal comparators`);\r\n        await this.setFpbEnabled(false);\r\n        for (let i = 0; i < nbCode; i++) {\r\n            this.availableHWBreakpoints.push(3758104584 /* FP_COMP0 */ + (4 * i));\r\n            await this.core.memory.write32(3758104584 /* FP_COMP0 */ + (i * 4), 0);\r\n        }\r\n    }\r\n    /**\r\n     * Enable or disable the Flash Patch and Breakpoint unit (FPB).\r\n     *\r\n     * @param enabled\r\n     */\r\n    async setFpbEnabled(enabled = true) {\r\n        this.enabled = enabled;\r\n        await this.core.memory.write32(3758104576 /* FP_CTRL */, 2 /* FP_CTRL_KEY */ | (enabled ? 1 : 0));\r\n    }\r\n    /**\r\n     * Enable debugging on the target CPU\r\n     */\r\n    async enable() {\r\n        await this.core.memory.write32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ | 1 /* C_DEBUGEN */);\r\n    }\r\n    /**\r\n     * Set breakpoints at specified memory addresses.\r\n     *\r\n     * @param addrs An array of memory addresses at which to set breakpoints.\r\n     */\r\n    async setBreakpoint(addr) {\r\n        if (this.breakpoints.has(addr)) {\r\n            // we already have a breakpoint there.\r\n            const breakpoint = this.breakpoints.get(addr);\r\n            if (typeof breakpoint !== \"number\") {\r\n                // already enabled\r\n                console.warn(`Breakpoint at ${addr.toString(16)} already enabled.`);\r\n                return;\r\n            }\r\n        }\r\n        let bkpt;\r\n        // choose where best to place a breakpoint\r\n        if (addr < 0x20000000) {\r\n            // we can use a HWBreakpoint\r\n            if (this.availableHWBreakpoints.length > 0) {\r\n                if (!this.enabled) {\r\n                    console.log(\"enabling fpb\");\r\n                    await this.setFpbEnabled(true);\r\n                }\r\n                const regAddr = this.availableHWBreakpoints.pop();\r\n                console.log(`using regAddr=${regAddr.toString(16)}`);\r\n                bkpt = new breakpoint_1.HWBreakpoint(regAddr, this.core, addr);\r\n            }\r\n            else {\r\n                bkpt = new breakpoint_1.SWBreakpoint(this.core, addr);\r\n            }\r\n        }\r\n        else {\r\n            bkpt = new breakpoint_1.SWBreakpoint(this.core, addr);\r\n        }\r\n        await bkpt.set();\r\n        this.breakpoints.set(addr, bkpt);\r\n    }\r\n    async deleteBreakpoint(addr) {\r\n        if (this.breakpoints.has(addr)) {\r\n            const bkpt = this.breakpoints.get(addr);\r\n            if (typeof bkpt !== \"number\") {\r\n                await bkpt.clear();\r\n                if (bkpt instanceof breakpoint_1.HWBreakpoint) {\r\n                    // return the register address to the pool\r\n                    this.availableHWBreakpoints.push(bkpt.regAddr);\r\n                }\r\n            }\r\n            this.breakpoints.delete(addr);\r\n        }\r\n        else {\r\n            console.warn(`Breakpoint at ${addr.toString(16)} does not exist.`);\r\n        }\r\n    }\r\n    /**\r\n     * Step the processor forward by one instruction.\r\n     */\r\n    async step() {\r\n        const dhcsr = await this.core.memory.read32(3758157296 /* DHCSR */);\r\n        if (!(dhcsr & (4 /* C_STEP */ | 2 /* C_HALT */))) {\r\n            console.error(\"Target is not halted.\");\r\n            return;\r\n        }\r\n        const interruptsMasked = (8 /* C_MASKINTS */ & dhcsr) !== 0;\r\n        if (!interruptsMasked) {\r\n            await this.core.memory.write32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ |\r\n                1 /* C_DEBUGEN */ |\r\n                2 /* C_HALT */ |\r\n                8 /* C_MASKINTS */);\r\n        }\r\n        await this.core.memory.write32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ |\r\n            1 /* C_DEBUGEN */ |\r\n            8 /* C_MASKINTS */ |\r\n            4 /* C_STEP */);\r\n        await this.core.waitForHalt();\r\n        await this.core.memory.write32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ |\r\n            1 /* C_DEBUGEN */ |\r\n            2 /* C_HALT */);\r\n    }\r\n}\r\nexports.Debug = Debug;\r\n//# sourceMappingURL=debug.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../dapjs/built/debug/debug.js\n// module id = 5\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass HWBreakpoint {\r\n    constructor(regAddr, parent, addr) {\r\n        this.regAddr = regAddr;\r\n        this.parent = parent;\r\n        this.addr = addr;\r\n    }\r\n    async set() {\r\n        /* set hardware breakpoint */\r\n        const bpMatch = ((this.addr & 0x2) ? 2 : 1) << 30;\r\n        await this.parent.memory.write32(this.regAddr, this.addr & 0x1ffffffc | bpMatch | 1);\r\n    }\r\n    async clear() {\r\n        /* clear hardware breakpoint */\r\n        await this.parent.memory.write32(this.regAddr, 0);\r\n    }\r\n}\r\nexports.HWBreakpoint = HWBreakpoint;\r\nclass SWBreakpoint {\r\n    constructor(parent, addr) {\r\n        this.parent = parent;\r\n        this.addr = addr;\r\n    }\r\n    async set() {\r\n        // read the instruction from the CPU... pleeeeease be in thumb mode\r\n        this.instruction = await this.parent.memory.read16(this.addr);\r\n        await this.parent.memory.write16(this.addr, SWBreakpoint.BKPT_INSTRUCTION);\r\n    }\r\n    async clear() {\r\n        /* clear hardware breakpoint */\r\n        await this.parent.memory.write16(this.addr, this.instruction);\r\n    }\r\n}\r\nSWBreakpoint.BKPT_INSTRUCTION = 0xbe00;\r\nexports.SWBreakpoint = SWBreakpoint;\r\n//# sourceMappingURL=breakpoint.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../dapjs/built/debug/breakpoint.js\n// module id = 6\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst dap_1 = require(\"../dap\");\r\nconst util_1 = require(\"../util\");\r\nclass PreparedMemoryCommand {\r\n    constructor(dap) {\r\n        this.cmd = new dap_1.PreparedDapCommand(dap);\r\n    }\r\n    write32(addr, data) {\r\n        this.cmd.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */);\r\n        this.cmd.writeAp(4 /* TAR */, addr);\r\n        this.cmd.writeAp(12 /* DRW */, data);\r\n    }\r\n    write16(addr, data) {\r\n        data = data << ((addr & 0x02) << 3);\r\n        this.cmd.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 1 /* CSW_SIZE16 */);\r\n        this.cmd.writeAp(4 /* TAR */, addr);\r\n        this.cmd.writeAp(12 /* DRW */, data);\r\n    }\r\n    read32(addr) {\r\n        this.cmd.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */);\r\n        this.cmd.writeAp(4 /* TAR */, addr);\r\n        this.cmd.readAp(12 /* DRW */);\r\n    }\r\n    read16(addr) {\r\n        this.cmd.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 1 /* CSW_SIZE16 */);\r\n        this.cmd.writeAp(4 /* TAR */, addr);\r\n        this.cmd.readAp(12 /* DRW */);\r\n    }\r\n    async go() {\r\n        return this.cmd.go();\r\n    }\r\n}\r\nexports.PreparedMemoryCommand = PreparedMemoryCommand;\r\nclass Memory {\r\n    constructor(dev) {\r\n        this.dev = dev;\r\n    }\r\n    /**\r\n     * Write a 32-bit word to the specified (word-aligned) memory address.\r\n     *\r\n     * @param addr Memory address to write to\r\n     * @param data Data to write (values above 2**32 will be truncated)\r\n     */\r\n    async write32(addr, data) {\r\n        const prep = new dap_1.PreparedDapCommand(this.dev);\r\n        prep.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */);\r\n        prep.writeAp(4 /* TAR */, addr);\r\n        prep.writeAp(12 /* DRW */, data);\r\n        await prep.go();\r\n    }\r\n    /**\r\n     * Write a 16-bit word to the specified (half word-aligned) memory address.\r\n     *\r\n     * @param addr Memory address to write to\r\n     * @param data Data to write (values above 2**16 will be truncated)\r\n     */\r\n    async write16(addr, data) {\r\n        data = data << ((addr & 0x02) << 3);\r\n        const prep = new dap_1.PreparedDapCommand(this.dev);\r\n        prep.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 1 /* CSW_SIZE16 */);\r\n        prep.writeAp(4 /* TAR */, addr);\r\n        prep.writeAp(12 /* DRW */, data);\r\n        await prep.go();\r\n    }\r\n    /**\r\n     * Read a 32-bit word from the specified (word-aligned) memory address.\r\n     *\r\n     * @param addr Memory address to read from.\r\n     */\r\n    async read32(addr) {\r\n        const prep = new dap_1.PreparedDapCommand(this.dev);\r\n        prep.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */);\r\n        prep.writeAp(4 /* TAR */, addr);\r\n        prep.readAp(12 /* DRW */);\r\n        try {\r\n            return (await prep.go())[0];\r\n        }\r\n        catch (e) {\r\n            // transfer wait, try again.\r\n            await util_1.delay(100);\r\n            return await this.read32(addr);\r\n        }\r\n    }\r\n    /**\r\n     * Read a 16-bit word from the specified (half word-aligned) memory address.\r\n     *\r\n     * @param addr Memory address to read from.\r\n     */\r\n    async read16(addr) {\r\n        const prep = new dap_1.PreparedDapCommand(this.dev);\r\n        prep.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 1 /* CSW_SIZE16 */);\r\n        prep.writeAp(4 /* TAR */, addr);\r\n        prep.readAp(12 /* DRW */);\r\n        let val;\r\n        try {\r\n            val = (await prep.go())[0];\r\n        }\r\n        catch (e) {\r\n            // transfer wait, try again.\r\n            await util_1.delay(100);\r\n            val = await this.read16(addr);\r\n        }\r\n        val = (val >> ((addr & 0x02) << 3) & 0xffff);\r\n        return val;\r\n    }\r\n    /**\r\n     * Reads a block of memory from the specified memory address.\r\n     *\r\n     * @param addr Address to read from\r\n     * @param words Number of words to read\r\n     * @param pageSize Memory page size\r\n     */\r\n    async readBlock(addr, words, pageSize) {\r\n        const funs = [async () => Promise.resolve()];\r\n        const bufs = [];\r\n        const end = addr + words * 4;\r\n        let ptr = addr;\r\n        while (ptr < end) {\r\n            let nextptr = ptr + pageSize;\r\n            if (ptr === addr) {\r\n                nextptr &= ~(pageSize - 1);\r\n            }\r\n            const len = Math.min(nextptr - ptr, end - ptr);\r\n            const ptr0 = ptr;\r\n            util_1.assert((len & 3) === 0);\r\n            funs.push(async () => {\r\n                bufs.push(await this.readBlockCore(ptr0, len >> 2));\r\n            });\r\n            ptr = nextptr;\r\n        }\r\n        for (const f of funs) {\r\n            await f();\r\n        }\r\n        const result = await util_1.bufferConcat(bufs);\r\n        return result.subarray(0, words * 4);\r\n    }\r\n    /**\r\n     * Write a block of memory to the specified memory address.\r\n     *\r\n     * @param addr Memory address to write to.\r\n     * @param words Array of 32-bit words to write to memory.\r\n     */\r\n    async writeBlock(addr, words) {\r\n        if (words.length === 0) {\r\n            return;\r\n        }\r\n        return this.writeBlockCore(addr, words);\r\n    }\r\n    async readBlockCore(addr, words) {\r\n        const prep = new dap_1.PreparedDapCommand(this.dev);\r\n        prep.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */);\r\n        prep.writeAp(4 /* TAR */, addr);\r\n        await prep.go();\r\n        let lastSize = words % 15;\r\n        if (lastSize === 0) {\r\n            lastSize = 15;\r\n        }\r\n        const blocks = [];\r\n        for (let i = 0; i < Math.ceil(words / 15); i++) {\r\n            const b = await this.dev.readRegRepeat(util_1.apReg(12 /* DRW */, 2 /* READ */), i === blocks.length - 1 ? lastSize : 15);\r\n            blocks.push(b);\r\n        }\r\n        return util_1.bufferConcat(blocks);\r\n    }\r\n    async writeBlockCore(addr, words) {\r\n        try {\r\n            const blSz = 14;\r\n            const reg = util_1.apReg(12 /* DRW */, 0 /* WRITE */);\r\n            const prep = new dap_1.PreparedDapCommand(this.dev);\r\n            prep.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */);\r\n            prep.writeAp(4 /* TAR */, addr);\r\n            for (let i = 0; i < Math.ceil(words.length / blSz); i++) {\r\n                prep.writeRegRepeat(reg, words.subarray(i * blSz, i * blSz + blSz));\r\n            }\r\n            await prep.go();\r\n        }\r\n        catch (e) {\r\n            if (e.dapWait) {\r\n                console.debug(`transfer wait, write block`);\r\n                await util_1.delay(100);\r\n                return await this.writeBlockCore(addr, words);\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.Memory = Memory;\r\n//# sourceMappingURL=memory.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../dapjs/built/core/memory.js\n// module id = 7\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst util_1 = require(\"../util\");\r\nclass CMSISDAP {\r\n    constructor(hid) {\r\n        this.maxSent = 1;\r\n        this.hid = hid;\r\n    }\r\n    async resetTarget() {\r\n        return this.cmdNums(10 /* DAP_RESET_TARGET */, []);\r\n    }\r\n    async disconnect() {\r\n        return this.cmdNums(3 /* DAP_DISCONNECT */, []);\r\n    }\r\n    async cmdNums(op, data) {\r\n        data.unshift(op);\r\n        const buf = await this.send(data);\r\n        if (buf[0] !== op) {\r\n            throw new Error(`Bad response for ${op} -> ${buf[0]}`);\r\n        }\r\n        switch (op) {\r\n            case 2 /* DAP_CONNECT */:\r\n            case 0 /* DAP_INFO */:\r\n            case 5 /* DAP_TRANSFER */:\r\n            case 6 /* DAP_TRANSFER_BLOCK */:\r\n                break;\r\n            default:\r\n                if (buf[1] !== 0) {\r\n                    throw new Error(`Bad status for ${op} -> ${buf[1]}`);\r\n                }\r\n        }\r\n        return buf;\r\n    }\r\n    async connect() {\r\n        console.log(\"Connecting...\");\r\n        const v = await this.info(254 /* PACKET_COUNT */);\r\n        if (v) {\r\n            this.maxSent = v;\r\n        }\r\n        else {\r\n            throw new Error(\"DAP_INFO returned invalid packet count.\");\r\n        }\r\n        await this.cmdNums(17 /* DAP_SWJ_CLOCK */, util_1.addInt32(null, 10000000));\r\n        const buf = await this.cmdNums(2 /* DAP_CONNECT */, [0]);\r\n        if (buf[1] !== 1) {\r\n            throw new Error(\"SWD mode not enabled.\");\r\n        }\r\n        await this.cmdNums(17 /* DAP_SWJ_CLOCK */, util_1.addInt32(null, 10000000));\r\n        await this.cmdNums(4 /* DAP_TRANSFER_CONFIGURE */, [0, 0x50, 0, 0, 0]);\r\n        await this.cmdNums(19 /* DAP_SWD_CONFIGURE */, [0]);\r\n        await this.jtagToSwd();\r\n        console.log(\"Connected\");\r\n    }\r\n    async jtagToSwd() {\r\n        const arrs = [\r\n            [56, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\r\n            [16, 0x9e, 0xe7],\r\n            [56, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\r\n            [8, 0x00],\r\n        ];\r\n        for (const arr of arrs) {\r\n            await this.swjSequence(arr);\r\n        }\r\n    }\r\n    async swjSequence(data) {\r\n        return this.cmdNums(18 /* DAP_SWJ_SEQUENCE */, data);\r\n    }\r\n    async info(id) {\r\n        const buf = await this.cmdNums(0 /* DAP_INFO */, [id]);\r\n        if (buf[1] === 0) {\r\n            return null;\r\n        }\r\n        switch (id) {\r\n            case 240 /* CAPABILITIES */:\r\n            case 254 /* PACKET_COUNT */:\r\n            case 255 /* PACKET_SIZE */:\r\n                if (buf[1] === 1) {\r\n                    return buf[2];\r\n                }\r\n                else if (buf[1] === 2) {\r\n                    return buf[3] << 8 | buf[2];\r\n                }\r\n        }\r\n        return buf.subarray(2, buf[1] + 2 - 1); // .toString(\"utf8\")\r\n    }\r\n    async send(command) {\r\n        const array = Uint8Array.from(command);\r\n        await this.hid.write(array.buffer);\r\n        const response = await this.hid.read();\r\n        return new Uint8Array(response.buffer);\r\n    }\r\n}\r\nexports.CMSISDAP = CMSISDAP;\r\n//# sourceMappingURL=cmsis_dap.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../dapjs/built/transport/cmsis_dap.js\n// module id = 8\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst cortex_m_1 = require(\"../core/cortex_m\");\r\nconst K64F_1 = require(\"./K64F\");\r\nconst NRF51_1 = require(\"./NRF51\");\r\nconst analyzer = new Uint32Array([\r\n    0x2180468c, 0x2600b5f0, 0x4f2c2501, 0x447f4c2c, 0x1c2b0049, 0x425b4033, 0x40230872, 0x085a4053,\r\n    0x425b402b, 0x40534023, 0x402b085a, 0x4023425b, 0x085a4053, 0x425b402b, 0x40534023, 0x402b085a,\r\n    0x4023425b, 0x085a4053, 0x425b402b, 0x40534023, 0x402b085a, 0x4023425b, 0x085a4053, 0x425b402b,\r\n    0x40534023, 0xc7083601, 0xd1d2428e, 0x2b004663, 0x4663d01f, 0x46b4009e, 0x24ff2701, 0x44844d11,\r\n    0x1c3a447d, 0x88418803, 0x4351409a, 0xd0122a00, 0x22011856, 0x780b4252, 0x40533101, 0x009b4023,\r\n    0x0a12595b, 0x42b1405a, 0x43d2d1f5, 0x4560c004, 0x2000d1e7, 0x2200bdf0, 0x46c0e7f8, 0x000000b6,\r\n    0xedb88320, 0x00000044,\r\n]);\r\nclass FlashTarget extends cortex_m_1.CortexM {\r\n    constructor(device, platform) {\r\n        super(device);\r\n        this.platform = platform;\r\n        this.inited = false;\r\n    }\r\n    /**\r\n     * Initialise the flash driver on the chip. Must be called before any of the other\r\n     * flash-related methods.\r\n     */\r\n    async flashInit() {\r\n        if (this.inited) {\r\n            return;\r\n        }\r\n        // reset and halt\r\n        await this.reset(true);\r\n        // make sure we're in Thumb mode.\r\n        await this.writeCoreRegister(16 /* XPSR */, 1 << 24);\r\n        await this.writeCoreRegister(9 /* R9 */, this.platform.flashAlgo.staticBase);\r\n        // upload analyzer\r\n        if (this.platform.flashAlgo.analyzerSupported) {\r\n            await this.memory.writeBlock(this.platform.flashAlgo.analyzerAddress, analyzer);\r\n        }\r\n        const result = await this.runCode(this.platform.flashAlgo.instructions, this.platform.flashAlgo.loadAddress, this.platform.flashAlgo.pcInit, this.platform.flashAlgo.loadAddress + 1, this.platform.flashAlgo.stackPointer, true, 0, 0, 0, 0);\r\n        this.inited = true;\r\n        return result;\r\n    }\r\n    /**\r\n     * Erase _all_ data stored in flash on the chip.\r\n     */\r\n    async eraseChip() {\r\n        if (!this.inited) {\r\n            await this.flashInit();\r\n        }\r\n        const result = await this.runCode(this.platform.flashAlgo.instructions, this.platform.flashAlgo.loadAddress, this.platform.flashAlgo.pcEraseAll, this.platform.flashAlgo.loadAddress + 1, this.platform.flashAlgo.stackPointer, false, 0, 0, 0);\r\n        return result;\r\n    }\r\n    /**\r\n     * Upload a program to flash memory on the chip.\r\n     * TODO: add a callback to provide progress data\r\n     *\r\n     * @param data Array of 32-bit integers to write to flash.\r\n     */\r\n    async flash(data, address, progressCb) {\r\n        if (!this.inited) {\r\n            await this.flashInit();\r\n        }\r\n        const pageSizeWords = this.platform.flashAlgo.pageSize / 4;\r\n        const bufferAddress = this.platform.flashAlgo.pageBuffers[0];\r\n        const flashStart = address || this.platform.flashAlgo.flashStart;\r\n        // How far through `data` are we (in bytes)\r\n        let ptr = 0;\r\n        while (ptr < data.byteLength) {\r\n            const wordPtr = ptr / 4;\r\n            const pageData = data.subarray(wordPtr, wordPtr + pageSizeWords);\r\n            const flashAddress = flashStart + ptr;\r\n            await this.memory.writeBlock(bufferAddress, pageData);\r\n            await this.runCode(this.platform.flashAlgo.instructions, this.platform.flashAlgo.loadAddress, this.platform.flashAlgo.pcProgramPage, // pc\r\n            this.platform.flashAlgo.loadAddress + 1, // lr\r\n            this.platform.flashAlgo.stackPointer, // sp\r\n            /* upload? */\r\n            false, \r\n            /* args */\r\n            flashAddress, this.platform.flashAlgo.pageSize, bufferAddress);\r\n            if (progressCb) {\r\n                progressCb(ptr / data.byteLength);\r\n            }\r\n            ptr += pageData.byteLength;\r\n        }\r\n        if (progressCb) {\r\n            progressCb(1.0);\r\n        }\r\n    }\r\n    async program(program, progressCb) {\r\n        await this.flashInit();\r\n        await this.eraseChip();\r\n        const totalBytes = program.totalByteLength();\r\n        let cumulativeBytes = 0;\r\n        const startTime = Date.now();\r\n        for (const section of program.sections) {\r\n            await this.flash(section.data, section.address, (progress) => {\r\n                const sectionBytes = section.data.byteLength * progress;\r\n                progressCb((cumulativeBytes + sectionBytes) / totalBytes);\r\n            });\r\n            cumulativeBytes += section.data.byteLength;\r\n        }\r\n        const endTime = Date.now();\r\n        const elapsedTime = endTime - startTime;\r\n        const transferRate = totalBytes / elapsedTime; // B/ms == kB/s\r\n        console.debug(`Transfer took ${elapsedTime / 1000} s`);\r\n        console.debug(`Transfered ${totalBytes} bytes at ${transferRate} kB/s`);\r\n        await this.flashUnInit();\r\n        progressCb(1.0);\r\n    }\r\n    flashUnInit() {\r\n        this.inited = false;\r\n    }\r\n}\r\nexports.FlashTarget = FlashTarget;\r\nexports.FlashTargets = new Map();\r\nexports.FlashTargets.set(\"0240\", new K64F_1.K64F());\r\nexports.FlashTargets.set(\"9900\", new NRF51_1.NRF51());\r\n//# sourceMappingURL=FlashTarget.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../dapjs/built/targets/FlashTarget.js\n// module id = 9\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst K64F_FLASH_ALGO = {\r\n    analyzerAddress: 0x1ffff000,\r\n    analyzerSupported: true,\r\n    flashSize: 0x100000,\r\n    flashStart: 0x0,\r\n    // Flash algorithm as a hex string\r\n    instructions: new Uint32Array([\r\n        0xE00ABE00, 0x062D780D, 0x24084068, 0xD3000040, 0x1E644058, 0x1C49D1FA, 0x2A001E52, 0x4770D1F2,\r\n        0x4604b570, 0x4616460d, 0x5020f24c, 0x81c84932, 0x1028f64d, 0x460881c8, 0xf0208800, 0x80080001,\r\n        0x4448482e, 0xf8dcf000, 0x2001b108, 0x2000bd70, 0x4601e7fc, 0x47702000, 0x4929b510, 0x44484827,\r\n        0xf8b8f000, 0xb92c4604, 0x48242100, 0xf0004448, 0x4604f9a9, 0xf837f000, 0xbd104620, 0x4604b570,\r\n        0x4448481e, 0x46214b1e, 0xf00068c2, 0x4605f85d, 0x481ab93d, 0x23004448, 0x68c24621, 0xf946f000,\r\n        0xf0004605, 0x4628f820, 0xb5febd70, 0x460c4605, 0x46234616, 0x46294632, 0x44484810, 0xf8f8f000,\r\n        0xb9674607, 0x22012000, 0x2000e9cd, 0x46224633, 0x90024629, 0x44484809, 0xf984f000, 0xf0004607,\r\n        0x4638f802, 0x4807bdfe, 0xf4206840, 0xf5000070, 0x49040070, 0x47706048, 0x40052000, 0x00000004,\r\n        0x6b65666b, 0x4001f000, 0x4a0e2070, 0x20807010, 0xbf007010, 0x7800480b, 0x280009c0, 0x4809d0fa,\r\n        0xf0017801, 0xb1080020, 0x47702067, 0x0010f001, 0x2068b108, 0xf001e7f9, 0xb1080001, 0xe7f42069,\r\n        0xe7f22000, 0x40020000, 0x4df0e92d, 0x460d4604, 0x469a4690, 0xf0004650, 0x4606f891, 0x4630b116,\r\n        0x8df0e8bd, 0x46422310, 0x46204629, 0xf86cf000, 0xb10e4606, 0xe7f34630, 0x0008eb05, 0x68e01e47,\r\n        0xf1f0fbb7, 0x7011fb00, 0x68e0b140, 0xf0f0fbb7, 0x0b01f100, 0xfb0068e0, 0x1e47f00b, 0x480be011,\r\n        0x68004478, 0x20096005, 0x71c84909, 0xffacf7ff, 0x69a04606, 0x69a0b108, 0xb1064780, 0x68e0e003,\r\n        0x42bd4405, 0xbf00d9eb, 0xe7c94630, 0x000002ec, 0x40020000, 0x4604b570, 0x4628460d, 0xf84ef000,\r\n        0xb10e4606, 0xbd704630, 0x2004b90c, 0x2044e7fb, 0x71c84902, 0xff88f7ff, 0x0000e7f5, 0x40020000,\r\n        0xb9094601, 0x47702004, 0x6cc04826, 0x6003f3c0, 0x447b4b25, 0x0010f833, 0xb90a0302, 0xe7f22064,\r\n        0x60082000, 0x2002604a, 0x02c06088, 0x200060c8, 0x61486108, 0xbf006188, 0x4602e7e5, 0x2004b90a,\r\n        0x61914770, 0xe7fb2000, 0x4604b530, 0x2004b90c, 0x1e58bd30, 0xb9104008, 0x40101e58, 0x2065b108,\r\n        0x6820e7f6, 0xd8054288, 0x0500e9d4, 0x188d4428, 0xd20142a8, 0xe7eb2066, 0xe7e92000, 0x480b4601,\r\n        0xd0014281, 0x4770206b, 0xe7fc2000, 0xb90b4603, 0x47702004, 0xd801290f, 0xd0012a04, 0xe7f82004,\r\n        0xe7f62000, 0x40048000, 0x0000025a, 0x6b65666b, 0x41f0e92d, 0x46884607, 0x461d4614, 0x2004b914,\r\n        0x81f0e8bd, 0x462a2308, 0x46384641, 0xffbcf7ff, 0xb10e4606, 0xe7f34630, 0x4812e01f, 0x68004478,\r\n        0x8000f8c0, 0x490fcc01, 0x390c4479, 0x60486809, 0x490ccc01, 0x39184479, 0x60886809, 0x490a2007,\r\n        0xf7ff71c8, 0x4606ff01, 0xb10869b8, 0x478069b8, 0xe004b106, 0x0808f108, 0x2d003d08, 0xbf00d1dd,\r\n        0xe7cd4630, 0x000001b0, 0x40020000, 0x4dffe92d, 0x4682b082, 0x2310460c, 0x46504621, 0xf7ff9a04,\r\n        0x4683ff83, 0x0f00f1bb, 0x4658d003, 0xe8bdb006, 0xe9da8df0, 0xfbb00101, 0x4260f7f1, 0x40084279,\r\n        0x42a54245, 0x443dd100, 0xe0229e04, 0x0804eba5, 0xd90045b0, 0xea4f46b0, 0x90011018, 0x4478480f,\r\n        0x60046800, 0x490e2001, 0x980171c8, 0x72c80a00, 0x72889801, 0x72489805, 0xfeb6f7ff, 0xf1bb4683,\r\n        0xd0010f00, 0xe7d14658, 0x0608eba6, 0x443d4444, 0x2e00bf00, 0x2000d1da, 0x0000e7c8, 0x0000010e,\r\n        0x40020000, 0x4604b570, 0xb90c460d, 0xbd702004, 0x49032040, 0x460871c8, 0xf7ff7185, 0xe7f6fe95,\r\n        0x40020000, 0x4dffe92d, 0x4617460c, 0xe9dd461d, 0xf8ddb80c, 0xb91da038, 0xb0042004, 0x8df0e8bd,\r\n        0x463a2304, 0x98004621, 0xff1ef7ff, 0xb10e4606, 0xe7f24630, 0x4814e022, 0x68004478, 0x20026004,\r\n        0x71c84912, 0xf8804608, 0x490fb00b, 0x39144479, 0x68096828, 0xf7ff6088, 0x4606fe67, 0xf1b8b15e,\r\n        0xd0010f00, 0x4000f8c8, 0x0f00f1ba, 0x2000d002, 0x0000f8ca, 0x1f3fe004, 0x1d241d2d, 0xd1da2f00,\r\n        0x4630bf00, 0x0000e7c9, 0x00000074, 0x40020000, 0x00000000, 0x00080000, 0x00100000, 0x00200000,\r\n        0x00400000, 0x00800000, 0x01000000, 0x01000000, 0x40020004, 0x00000000,\r\n    ]),\r\n    loadAddress: 0x20000000,\r\n    pageBuffers: [0x20003000, 0x20004000],\r\n    pageSize: 0x1000,\r\n    // Relative function addresses\r\n    pcEraseAll: 0x20000059,\r\n    pcEraseSector: 0x2000007D,\r\n    pcInit: 0x20000021,\r\n    // pcUnInit: 0x49,\r\n    pcProgramPage: 0x200000AB,\r\n    stackPointer: 0x20001000,\r\n    staticBase: 0x20000000 + 0x20 + 0x474,\r\n};\r\nclass K64F {\r\n    constructor() {\r\n        this.flashAlgo = K64F_FLASH_ALGO;\r\n    }\r\n    overrideSecurityBits(address, data) {\r\n        const u8data = new Uint8Array(data.buffer);\r\n        // Kinetis security values and addresses\r\n        const SECURITY_START = 0x400;\r\n        const SECURITY_SIZE = 16;\r\n        const FPROT_ADDR = 0x408;\r\n        const FPROT_ADDR_END = 0x40c;\r\n        const FPROT_SIZE = 4;\r\n        const FSEC_ADDR = 0x40c;\r\n        const FSEC_VAL = 0xFE;\r\n        const FOPT_ADDR = 0x40d;\r\n        const FOPT_VAL = 0xFF;\r\n        const FEPROT_ADDR = 0x40e;\r\n        const FEPROT_VAL = 0xFF;\r\n        const FDPROT_ADDR = 0x40f;\r\n        const FDPROT_VAL = 0xFF;\r\n        if (address <= SECURITY_START && address + u8data.byteLength > SECURITY_START + SECURITY_SIZE) {\r\n            for (let i = FPROT_ADDR; i < FPROT_ADDR_END; i++) {\r\n                if (u8data[i - address] !== 0xff) {\r\n                    u8data[i - address] = 0xff;\r\n                    console.debug(`FCF[${i - FPROT_ADDR}] at addr ${i} changed to ${u8data[i - address]}`);\r\n                }\r\n            }\r\n            if (u8data[FSEC_ADDR - address] !== FSEC_VAL) {\r\n                u8data[FSEC_ADDR - address] = FSEC_VAL;\r\n                console.debug(`FSEC at addr ${FSEC_ADDR} changed to ${FSEC_VAL}`);\r\n            }\r\n            if (u8data[FOPT_ADDR - address] === 0x00) {\r\n                console.debug(`FOPT set to restricted value 0x00`);\r\n            }\r\n            if (u8data[FEPROT_ADDR - address] !== FEPROT_VAL) {\r\n                u8data[FEPROT_ADDR - address] = FEPROT_VAL;\r\n                console.debug(`FEPROT at addr ${FEPROT_ADDR} changed to ${FEPROT_VAL}`);\r\n            }\r\n            if (u8data[FDPROT_ADDR - address] !== FDPROT_VAL) {\r\n                u8data[FDPROT_ADDR - address] = FDPROT_VAL;\r\n                console.debug(`FDPROT at addr ${FDPROT_ADDR} changed to ${FDPROT_VAL}`);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.K64F = K64F;\r\n//# sourceMappingURL=K64F.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../dapjs/built/targets/K64F.js\n// module id = 10\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst NRF51_FLASH_ALGO = {\r\n    analyzerAddress: 0x20003000,\r\n    analyzerSupported: true,\r\n    beginData: 0x20002000,\r\n    flashSize: 0x40000,\r\n    flashStart: 0x0,\r\n    instructions: new Uint32Array([\r\n        0xE00ABE00, 0x062D780D, 0x24084068, 0xD3000040, 0x1E644058, 0x1C49D1FA, 0x2A001E52, 0x4770D1F2,\r\n        0x47702000, 0x47702000, 0x4c26b570, 0x60602002, 0x60e02001, 0x68284d24, 0xd00207c0, 0x60602000,\r\n        0xf000bd70, 0xe7f6f82c, 0x4c1eb570, 0x60612102, 0x4288491e, 0x2001d302, 0xe0006160, 0x4d1a60a0,\r\n        0xf81df000, 0x07c06828, 0x2000d0fa, 0xbd706060, 0x4605b5f8, 0x4813088e, 0x46142101, 0x4f126041,\r\n        0xc501cc01, 0x07c06838, 0x1e76d006, 0x480dd1f8, 0x60412100, 0xbdf84608, 0xf801f000, 0x480ce7f2,\r\n        0x06006840, 0xd00b0e00, 0x6849490a, 0xd0072900, 0x4a0a4909, 0xd00007c3, 0x1d09600a, 0xd1f90840,\r\n        0x00004770, 0x4001e500, 0x4001e400, 0x10001000, 0x40010400, 0x40010500, 0x40010600, 0x6e524635,\r\n        0x00000000,\r\n    ]),\r\n    loadAddress: 0x20000000,\r\n    minProgramLength: 4,\r\n    pageBuffers: [0x20002000, 0x20002400],\r\n    pageSize: 0x400,\r\n    pcEraseAll: 0x20000029,\r\n    pcEraseSector: 0x20000049,\r\n    pcInit: 0x20000021,\r\n    pcProgramPage: 0x20000071,\r\n    stackPointer: 0x20001000,\r\n    staticBase: 0x20000170,\r\n};\r\nclass NRF51 {\r\n    constructor() {\r\n        this.flashAlgo = NRF51_FLASH_ALGO;\r\n    }\r\n    overrideSecurityBits(address, data) {\r\n        /* empty */\r\n    }\r\n}\r\nexports.NRF51 = NRF51;\r\n//# sourceMappingURL=NRF51.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../dapjs/built/targets/NRF51.js\n// module id = 11\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst util_1 = require(\"../util\");\r\nclass FlashSection {\r\n    constructor(address, data) {\r\n        this.address = address;\r\n        this.data = data;\r\n        /* empty */\r\n    }\r\n    toString() {\r\n        return `${this.data.byteLength} bytes @ ${this.address.toString(16)}`;\r\n    }\r\n}\r\nexports.FlashSection = FlashSection;\r\nclass FlashProgram {\r\n    constructor(sections) {\r\n        this.sections = sections;\r\n    }\r\n    static fromIntelHex(hex) {\r\n        const lines = hex.split(/\\n/);\r\n        let upperAddr = 0;\r\n        let startAddr = 0;\r\n        let current = null;\r\n        const chunks = [];\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const line = lines[i];\r\n            if (line.substr(0, 1) !== \":\") {\r\n                throw new Error(`Invaild line in hex file: ${i + 1}`);\r\n            }\r\n            else {\r\n                const length = parseInt(line.substr(1, 2), 16);\r\n                const addr = upperAddr + parseInt(line.substr(3, 4), 16);\r\n                const fieldType = parseInt(line.substr(7, 2), 16);\r\n                const data = line.substr(9, length * 2);\r\n                if (fieldType === 0x00) {\r\n                    if (current && addr !== startAddr + (current.length / 2)) {\r\n                        // non-contiguous\r\n                        const sectionData = util_1.hex2bin(current);\r\n                        chunks.push(new FlashSection(startAddr, new Uint32Array(sectionData.buffer)));\r\n                        current = \"\";\r\n                        startAddr = addr;\r\n                    }\r\n                    else if (!current) {\r\n                        startAddr = addr;\r\n                        current = \"\";\r\n                    }\r\n                    current += data;\r\n                }\r\n                else if (fieldType === 0x01) {\r\n                    // EOF\r\n                    break;\r\n                }\r\n                else if (fieldType === 0x02) {\r\n                    // extended segment address record\r\n                    upperAddr = parseInt(data, 16) << 4;\r\n                }\r\n                else if (fieldType === 0x04) {\r\n                    // extended linear address record\r\n                    upperAddr = parseInt(data, 16) << 16;\r\n                }\r\n            }\r\n        }\r\n        return new FlashProgram(chunks);\r\n    }\r\n    static fromBinary(addr, bin) {\r\n        return new FlashProgram([new FlashSection(addr, bin)]);\r\n    }\r\n    totalByteLength() {\r\n        return this.sections.map((s) => s.data.byteLength).reduce((x, y) => x + y);\r\n    }\r\n    toString() {\r\n        return this.sections.toString();\r\n    }\r\n}\r\nexports.FlashProgram = FlashProgram;\r\n//# sourceMappingURL=FlashProgram.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../dapjs/built/targets/FlashProgram.js\n// module id = 12\n// module chunks = 0","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction bufferExtend(source, length) {\n    var sarr = new Uint8Array(source);\n    var dest = new ArrayBuffer(length);\n    var darr = new Uint8Array(dest);\n    for (var i = 0; i < Math.min(source.byteLength, length); i++) {\n        darr[i] = sarr[i];\n    }\n    return dest;\n}\nvar HID = (function () {\n    function HID(device) {\n        this.device = device;\n    }\n    HID.prototype.open = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var hids, _i, _a, endpoint;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.device.open()];\n                    case 1:\n                        _b.sent();\n                        return [4 /*yield*/, this.device.selectConfiguration(1)];\n                    case 2:\n                        _b.sent();\n                        hids = this.device.configuration.interfaces.filter(function (intf) { return intf.alternates[0].interfaceClass == 0x03; });\n                        if (hids.length == 0) {\n                            throw 'No HID interfaces found.';\n                        }\n                        this.interfaces = hids;\n                        if (this.interfaces.length == 1) {\n                            this.interface = this.interfaces[0];\n                        }\n                        return [4 /*yield*/, this.device.claimInterface(this.interface.interfaceNumber)];\n                    case 3:\n                        _b.sent();\n                        this.endpoints = this.interface.alternates[0].endpoints;\n                        this.ep_in = null;\n                        this.ep_out = null;\n                        for (_i = 0, _a = this.endpoints; _i < _a.length; _i++) {\n                            endpoint = _a[_i];\n                            if (endpoint.direction == 'in') {\n                                this.ep_in = endpoint;\n                            }\n                            else {\n                                this.ep_out = endpoint;\n                            }\n                        }\n                        if (this.ep_in == null || this.ep_out == null) {\n                            console.log('Unable to find an in and an out endpoint.');\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    HID.prototype.close = function () {\n        return this.device.close();\n    };\n    HID.prototype.write = function (data) {\n        var report_size = this.ep_out.packetSize;\n        var buffer = bufferExtend(data, report_size);\n        return this.device.transferOut(this.ep_out.endpointNumber, buffer);\n    };\n    HID.prototype.read = function () {\n        var report_size = this.ep_in.packetSize;\n        return this.device.transferIn(this.ep_in.endpointNumber, report_size)\n            .then(function (res) { return res.data; });\n    };\n    return HID;\n}());\nexports.default = HID;\n//# sourceMappingURL=hid.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/webhid/bin/hid.js\n// module id = 13\n// module chunks = 0","\nexport interface IPlatform {\n    name: string;\n    productCode: string;\n}\n\nexport class PlatformSelector {\n    private deviceCache: Map<string, IPlatform>;\n    private element: HTMLSelectElement;\n    private deviceElement: HTMLElement;\n\n    constructor(id: string, devices: string) {\n        const elem = document.getElementById(id);\n        this.deviceElement = document.getElementById(devices);\n\n        if (elem.nodeName === \"SELECT\") {\n            this.element = elem as HTMLSelectElement;\n        } else {\n            console.log(elem.nodeName);\n            throw new Error(\"select element must be chosen\");\n        }\n\n        this.deviceCache = new Map<string, IPlatform>();\n    }\n\n    public show(platform: IPlatform) {\n        this.deviceElement.innerHTML =\n            `<option value='${platform.productCode}' id='${platform.productCode}'>${platform.name}</option>`;\n        this.element.value = platform.productCode;\n    }\n\n    public enable() {\n        this.element.disabled = false;\n    }\n\n    public disable() {\n        this.element.disabled = true;\n    }\n\n    public async lookupDevice(code: string) {\n        if (this.deviceCache.has(code)) {\n            return this.deviceCache.get(code);\n        }\n\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"get\", `https://os.mbed.com/api/v3/platforms/${code}/`, true);\n        xhr.responseType = \"json\";\n\n        return new Promise<IPlatform>((resolve, reject) => {\n            xhr.onload = (e: any) => {\n                const device = {\n                    name: xhr.response.name,\n                    productCode: xhr.response.productcode,\n                };\n                this.deviceCache.set(code, device);\n\n                resolve(device);\n            };\n            xhr.send();\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/device_selector.ts","\nexport default class HTMLLogger {\n    private element: Element;\n\n    constructor(selector: string) {\n        this.element = document.querySelector(selector);\n    }\n\n    public log(data: string) {\n        this.element.innerHTML = this.element.innerHTML + data + \"\\n\";\n    }\n\n    public clear() {\n        this.element.innerHTML = \"\";\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/logger.ts"],"sourceRoot":""}